{
    "contents" : "---\ntitle: \"AllFamilys\"\nauthor: \"mlm\"\ndate: \"20 de marzo de 2016\"\noutput: html_document\n---\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(warning = FALSE, echo = FALSE, message = FALSE)\n```\n\n```{r}\n\n# Create matrix.\ntheo.MSDi.nsF = c()\ntheo.MSDi.nsT = c()\ntheo.MSDi.nsF.s = c()\ntheo.MSDi.nsT.s = c()\n\nexp.MSDi = c()\nexp.MSDi.s = c()\n\n# Dirs.\nout.dir <- \"OUT\"\n\n# Read input.\ninput.fname <- file.path(\"input_MainMultipleReport.csv\")\ninput <- read.csv(input.fname)\n\nprint(input)\n\nfor (a in (1:nrow(input))) { \n  family <- as.character(input$family)[a]\n  p.ref <- as.character(input$p.ref)[a]\n  mut.model = input$mut.model[a]\n  n.mut.p = input$n.mut.p[a]\n  R0 = input$R0[a]\n  K.analysis = input$K.analysis[a]\n  \n  \n  \n  #Read experimental data.\n  analysis.fname.id <- paste(family, \"_mut.model_\", mut.model, \"_naturalSelection_\", \"FALSE\", \"_R0_\", R0, \"_core_\", \"FALSE\", \"_K.analysis_\", K.analysis, sep = \"\")\n  \n  m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.exp.dr.squarei.csv\", sep = \"\")))\n  m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.exp.smooth.dr.squarei.csv\", sep = \"\")))\n  \n  cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )\n  cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )\n  \n  #Read theoretical data#\n  \n  # ns = F.\n  m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.theo.dr.squarei.csv\", sep = \"\")))\n  m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.theo.smooth.dr.squarei.csv\", sep = \"\")))\n  nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)\n  nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)\n  \n  # ns = T.\n  analysis.fname.id <- paste(family, \"_mut.model_\", mut.model, \"_naturalSelection_\", \"TRUE\", \"_R0_\", R0, \"_core_\", \"FALSE\", \"_K.analysis_\", K.analysis, sep = \"\")\n  \n\n  m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.theo.dr.squarei.csv\", sep = \"\")))\n  m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, \"_out_m.theo.smooth.dr.squarei.csv\", sep = \"\")))\n  nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)\n  nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)\n  \n  ## Fits.\n  fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)\n  MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)\n  \n  fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)\n  MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)\n  \n  fit.nsF.cF.s = lm(cF.exp.MSDi.s ~ nsF.cF.theo.smooth.MSDi)\n  MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)\n  \n  fit.nsT.cF.s = lm(cF.exp.MSDi.s ~ nsT.cF.theo.smooth.MSDi)\n  MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)\n  \n  # Concatenate information.\n  theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)\n  theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsT.cF)\n  theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)\n  theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsT.cF.s)\n  \n  cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]\n  cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]\n  \n  exp.MSDi = c(exp.MSDi, cF.exp.MSDi)\n  exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)\n  \n}\n\n# Caluclate measures.\nR2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi)^2 \nR2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi)^2 \n\nR2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)^2\nR2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)^2 \n\nMSE.nsF.cF = mean((theo.MSDi.nsF - exp.MSDi) ^ 2)\nMSE.nsT.cF = mean((theo.MSDi.nsT - exp.MSDi) ^ 2)\n\nMSE.nsF.cF.s = mean((theo.MSDi.nsF.s - exp.MSDi.s) ^ 2)\nMSE.nsT.cF.s = mean((theo.MSDi.nsT.s - exp.MSDi.s) ^ 2)\n\n```\n\n```{r, include = F}\nlayout(matrix(1:3, 3, 1, byrow = F)) \n\nplot(theo.MSDi.nsF, type=\"l\", xlab = \"sitio\", ylab = \"Theoretical\")\nplot(exp.MSDi, type=\"l\", col =\"red\", ylab = \"Experimental\")\nplot(theo.MSDi.nsF, type=\"l\", ylab = \"both\")\npoints(exp.MSDi, col = \"red\", type=\"l\")\nlegend(\"topleft\", paste(\"R^2\", round(R2.nsF.cF, digits = 2)), bty = \"n\", text.col = \"red\")\n\n\n```\n\n```{r, include = F}\nlayout(matrix(1:3, 3, 1, byrow = F)) \nplot(theo.MSDi.nsT, type=\"l\", xlab = \"sitio\", ylab = \"Theoretical\")\nplot(exp.MSDi, type=\"l\", col =\"red\", ylab = \"Experimental\")\nplot(theo.MSDi.nsT, type=\"l\", ylab = \"both\")\npoints(exp.MSDi, col = \"red\", type=\"l\")\nlegend(\"topleft\", paste(\"R^2\", round(R2.nsT.cF, digits = 2)), bty = \"n\", text.col = \"red\")\n```\nAll familys fitted smooth MSD profiles \n\n\nWithout natural selection (ns = F)\n\n```{r}\nlayout(matrix(1:3, 3, 1, byrow = F)) \nplot(theo.MSDi.nsF.s, type=\"l\", xlab = \"sitio\", ylab = \"Theoretical ns = F\")\nplot(exp.MSDi.s, type=\"l\", col =\"red\", ylab = \"Experimental\")\nplot(theo.MSDi.nsF.s, type=\"l\", ylab = \"both\")\npoints(exp.MSDi.s, col = \"red\", type=\"l\")\nlegend(\"topleft\", paste(\"R^2\", round(R2.nsF.cF.s, digits = 2), \" \", \"MSE\", signif(MSE.nsF.cF.s, digits = 2)), bty = \"n\", text.col = \"red\")\n\n\n```\n\nWith natural selection (ns = T)\n\n```{r}\nlayout(matrix(1:3, 3, 1, byrow = F)) \nplot(theo.MSDi.nsT.s, type=\"l\", xlab = \"sitio\", ylab = \"Theoretical ns = T\")\nplot(exp.MSDi.s, type=\"l\", col =\"red\", ylab = \"Experimental\")\nplot(theo.MSDi.nsT.s, type=\"l\", ylab = \"both\")\npoints(exp.MSDi.s, col = \"red\", type=\"l\")\nlegend(\"topleft\", paste(\"R^2\", round(R2.nsT.cF.s, digits = 2), \" \", \"MSE\", signif(MSE.nsT.cF.s, digits = 2)), bty = \"n\", text.col = \"red\")\n\n```\n\n",
    "created" : 1458501008756.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "25529356",
    "id" : "507403A",
    "lastKnownWriteTime" : 1458504479,
    "path" : "C:/Users/Laurita/Desktop/Doctorado/VariabilidadEstructuralProteica/AllFamilys.Rmd",
    "project_path" : "AllFamilys.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}