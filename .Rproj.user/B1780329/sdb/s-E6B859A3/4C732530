{
    "contents" : "AnalyzeAlignmentGeneral <- function(df.alignment)UseMethod(\"AnalyzeAlignmentGeneral\") \n\nAnalyzeAlignmentGeneral.NoCore <- function(df.alignment) {\n  \n  # Prepare data.\n  alignment <- df.alignment$alignment\n  id <- df.alignment$id\n  p.1 <- df.alignment$p.1\n  p.2 <- df.alignment$p.2\n  \n  # Extract data form the alignment.\n  lalignment = ncol(alignment)\n  alignment.p.1 = alignment[id == p.1, ]\n  alignment.p.2 = alignment[id == p.2, ]\n\n  # Get indexes.\n  p.1.index = c()\n  p.2.index = c()\n  aa.p.1 = 1\n  aa.p.2 = 1\n  \n  for (i in (1:lalignment)) {\n    if (alignment.p.1[i] != \"-\") {\n      p.1.index[i] <- aa.p.1\n      aa.p.1 = aa.p.1 + 1\n    }\n    if (alignment.p.2[i] != \"-\") {\n      p.2.index[i] <- aa.p.2\n      aa.p.2 = aa.p.2 + 1\n    }\n  }\t\n  \n  # Get aligned and not.aligned indexes.\n  aligned.p.1.index = c()\n  aligned.p.2.index = c()\n  not.aligned.p.1.index = c()\n  not.aligned.p.2.index = c()\n  \n  for (i in (1:lalignment)) {\n    if (alignment.p.1[i] != \"-\" & alignment.p.2[i] != \"-\") {\n      aligned.p.1.index <- cbind(aligned.p.1.index, p.1.index[i])\n      aligned.p.2.index <- cbind(aligned.p.2.index, p.2.index[i])\n    }\n    if (alignment.p.1[i] != \"-\" & alignment.p.2[i] == \"-\") {\n      not.aligned.p.1.index <- cbind(not.aligned.p.1.index, p.1.index[i])\n    }\n    if (alignment.p.2[i] != \"-\" & alignment.p.1[i] == \"-\") {\n      not.aligned.p.2.index <- cbind(not.aligned.p.2.index, p.2.index[i])\n    }\n  }\t\n  naligned <- length(aligned.p.1.index)\n  output = list(\"aligned.p.1.index\" = aligned.p.1.index,\n                \"aligned.p.2.index\" = aligned.p.2.index,\n                \"not.aligned.p.1.index\" = not.aligned.p.1.index,\n                \"not.aligned.p.2.index\" = not.aligned.p.2.index,\n                \"naligned\" = naligned)\n  output\n}\n\nAnalyzeAlignmentGeneral.Core <- function(df.alignment) {\n\n  # Prepare data.\n  alignment <- df.alignment$alignment\n  id <- df.alignment$id\n  p.1 <- df.alignment$p.1\n  p.2 <- df.alignment$p.2\n  \n  # Extract data form the alignment.\n  nprot = nrow(alignment)\n  lalignment = ncol(alignment)\n  alignment.p.1 = alignment[id == p.1, ]\n  alignment.p.2 = alignment[id == p.2, ]\n  \n  # Calculate core.index.\n  gaps = matrix(nrow = lalignment, ncol = 2)\n  gaps[, 2] = seq(1:lalignment)\n  for (i in (1:lalignment)) {\n    ngaps = 0\n    for (j in (1:nprot)) {\n      is.gap = is.gap(alignment[j, i])\n      if (is.gap == \"TRUE\") {\n        ngaps = ngaps + 1\n      }\n    }\n    gaps[i, 1] = ngaps\n  }\n  core.index = gaps[gaps[, 1] == 0, 2]\n  \n  # Get indexes.\n  p.1.index = c()\n  p.2.index = c()\n  aa.p.1 = 1\n  aa.p.2 = 1\n  \n  for (i in (1:lalignment)) {\n    if (alignment.p.1[i] != \"-\") {\n      p.1.index[i] <- aa.p.1\n      aa.p.1 = aa.p.1 + 1\n    }\n    if (alignment.p.2[i] != \"-\") {\n      p.2.index[i] <- aa.p.2\n      aa.p.2 = aa.p.2 + 1\n    }\n  }\t\n  \n  # Get aligned and not.aligned indexes.\n  core.index.p.1 = p.1.index[core.index]\n  core.index.p.2 = p.2.index[core.index]\n  naligned <- length(core.index.p.1)\n  \n  no.core.index.p.1 = p.1.index[-c(core.index)]\n  no.core.index.p.2 = p.2.index[-c(core.index)]\n  no.core.index.p.1 = no.core.index.p.1[!is.na(no.core.index.p.1)]\n  no.core.index.p.2 = no.core.index.p.2[!is.na(no.core.index.p.2)]\n  \n  output = list(\"aligned.p.1.index\" = core.index.p.1, \n              \"aligned.p.2.index\" = core.index.p.2,\n              \"not.aligned.p.1.index\" = no.core.index.p.1,\n              \"not.aligned.p.2.index\" = no.core.index.p.2,\n              \"naligned\" = naligned)\n  output\n}",
    "created" : 1447023977075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "27315675",
    "id" : "4C732530",
    "lastKnownWriteTime" : 1447086477,
    "path" : "C:/Users/Laurita/Desktop/Doctorado/VariabilidadEstructuralProteica/FUNCTIONS/AnalyzeAlignmentGeneral.R",
    "project_path" : "FUNCTIONS/AnalyzeAlignmentGeneral.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}