{
    "contents" : "# INFORMACIÓN:\n#\n# El programa genera mutantes múltiples de una proteína determinada usando el modelo mutacional Linearly \n# Forced - Elastic Network Model (LF-ENM) y considerando a las fuerzas que modelan cada mutación aditivas \n# entre sí. Además, calcula medidas de variabilidad estructural y dinámica entre las proteínas mutantes \n# generadas y la proteína de referencia.\n#\n# Para utilizar el programa se debe completar un input (\"DATA/Theoretical/theoretical_input.csv\") especificando: \n# -family: la familia de proteínas a la que pertenece la proteína a mutar. \n# Tener en cuenta que las familias que pueden ser analizadas experimentalmente son\n# \"serinProteases\", \"globins\" o \"plastocyanins\".\n# -p.ref: el código de pdb (pdbid) de la proteína a mutar (ej.:\"1a6m\")\n# -chain: la cadena de p.ref que se desea mutar.\n# -heme: solo se utiliza para la familia de las globinas, puede ser \"TRUE\" o \"FALSE\" dependiendo de \n# si se quiere considerar o no al grupo HEMO. \n# -nmut: la cantidad de mutantes a generar.\n# -nsitesmut: la cantidad de sitios mutados por proteína mutante.\n# -Fmax: valor máximo de las fuerzas usadas para la simulación de las mutaciones.\n# -model: el modelo de red elástica a usar, que solo puede ser \"ANM\" por el momento.\n# -R0: cut-off del ANM.\n# Remove objects.\nrm(list = ls()) \n# Read input.\ndata.dir <- \"DATA/Theoretical\"\ninput.fname <- file.path(data.dir, \"theoretical_input.csv\")\ninput <- read.csv(input.fname)\nfamily <- input$family\np.ref <- input$p.ref \nchain <- input$chain\nheme <- input$heme \nnmut = input$nmut \nnsitesmut = input$nsitesmut \nfmax = input$fmax \nmodel <- input$model\nR0 = input$R0\n# PDB fname.\nget.pdb(as.character(p.ref), data.dir) \npdb.fname <- file.path(data.dir, paste(p.ref, \".pdb\", sep = \"\"))\n# Functions fnames.\nReadCA.fname <- \"FUNCTIONS/ReadCA.R\" \nReadHeme.fname <- \"FUNCTIONS/ReadHeme.R\"  \nCalculateKeff.fname <- \"FUNCTIONS/CalculateKeff.R\"  \nCalculateK.fname <- \"FUNCTIONS/CalculateK.R\" \nCalculateKij.fname <- file.path(\"FUNCTIONS\", paste(\"CalculateKij\", model, \".R\", sep = \"\")) \nCalculateForce.fname <- \"FUNCTIONS/CalculateForce.R\"  \nCalculateVariability.fname <- \"FUNCTIONS/CalculateVariability.R\"\n# Output dir.\nout.dir <- \"OUT/Theoretical\"\n# General parameters.\nTOLERANCE = 1e-10\n# Load librarys.\nlibrary(bio3d)\n# Source functions.\nsource(ReadCA.fname)\nsource(ReadHeme.fname)\nsource(CalculateKeff.fname)\nsource(CalculateK.fname)\nsource(CalculateKij.fname)\nsource(CalculateForce.fname)\nsource(CalculateVariability.fname)\n# Read PDB of p.ref.\npdb <- ReadCA(pdb.fname, chain)\nr.p.ref = pdb$xyz.calpha\nnsites = pdb$nsites\nnaa = nsites  # naa = n.aminoaids, nsites = n.aminoácids + n.atoms we want to consider, ej.: Ns and Fe from heme group in Globins# \nif (family == \"globins\" & heme == \"TRUE\") {\n  r.heme = ReadHeme(pdb.fname, chain)\n  r.p.ref = cbind(r.p.ref, r.heme)\n  nsites = ncol(r.p.ref)\n  aligned.index = seq(1, naa)\n  not.aligned.index = seq((naa+1), nsites)\n}\n# Calculate K of p.ref.\nK.p.ref <- CalculateK(r.p.ref, CalculateKij, R0, TOLERANCE)\n# Measures of variability.\nm.nH = matrix(ncol = 3 * naa, nrow = nmut)\nm.Pn = matrix(ncol = 3 * naa, nrow = nmut)\nm.d.evalues = matrix(ncol = 3 * naa, nrow = nmut)\nm.dr.squarei = matrix(ncol = naa, nrow = nmut)\n# Count the number of mutants to discard.\ncount = 0\n# Calculate mutants.\nfor(mut in seq(nmut)) {\n  f <- rep(0, 3 * nsites)\n  for (l in (sample(1:naa, replace = F)[1:nsitesmut])) {\n    print(c(mut, l))\n    fl = CalculateForce(l, r.p.ref, K.p.ref$kij, fmax)\n    f = f + fl\n  }\n  dr = K.p.ref$cov %*% f\n  dim(dr) <- c(3, nsites)\n  r.mut = r.p.ref + dr\n  # Rotate mutants minimizing RMSD with P.ref.\n  r.mut <- matrix(fit.xyz(fixed = as.vector(r.p.ref), \n                         mobile = as.vector(r.mut),\n                     fixed.inds = seq(1, 3 * naa),\n                    mobile.inds = seq(1, 3 * naa)), nrow = 3) \n  # Calculate K of mutants and p.ref.\n  if (naa != nsites) {\n    K.mut <- CalculateKeff(r.mut, aligned.index, not.aligned.index, CalculateKij, R0, TOLERANCE)\n    K.p.ref.2 <- CalculateKeff(r.p.ref, aligned.index, not.aligned.index, CalculateKij, R0, TOLERANCE)\n  }\n  if (naa == nsites) {\n    K.mut <- CalculateK(r.mut, CalculateKij, R0, TOLERANCE)\n    K.p.ref.2 <- K.p.ref\n  }\n  nmodes.p.ref.2 <- length(K.p.ref.2$va)  \n  nmodes.mut <- length(K.mut$va)  \n  # Calculate dr.\n  dr = (r.mut - r.p.ref)[, 1:naa]   \n  # Calculate measures o variability.\n  if (nmodes.p.ref.2 == nmodes.mut) { \n    VA <- CalculateVariability(dr, K.p.ref.2, K.mut)\n    m.nH[mut, 1:nmodes.p.ref.2] = t(VA$nH)\n    m.Pn[mut, 1:nmodes.p.ref.2] = t(VA$Pn)\n    m.d.evalues[mut, 1:nmodes.p.ref.2] = t(VA$d.evalues[1:nmodes.p.ref.2])\n    dr.squarei = rbind(VA$dr.squarei, seq(1, naa))\n    for (i in (1:naa)) {\n      m.dr.squarei[mut, i] = matrix(dr.squarei[1, dr.squarei[2, ] == i], ncol = 1, nrow = 1)\n    }\n  }\n  if (nmodes.p.ref.2 != nmodes.mut) { \n    count <- count +1\n  }\n}\n# Calculate Means.\nmean.nH = colMeans(m.nH, na.rm = T)\nmean.Pn = colMeans(m.Pn, na.rm = T)\nmean.d.evalues = colMeans(m.d.evalues, na.rm = T)\nMSDi = colMeans(m.dr.squarei, na.rm = T)\nMSD = rowMeans(m.dr.squarei, na.rm = T)\n# Save information.\nif (family == \"globins\") {\n  family <- paste(family, \"_heme_\", heme, sep = \"\")\n}\nwrite.csv(m.nH, file = file.path(out.dir, paste(family, \"_out_m.nH.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.Pn, file = file.path(out.dir, paste(family, \"_out_m.Pn.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.d.evalues, file = file.path(out.dir, paste(family, \"_out_m.d.evalues.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.dr.squarei, file = file.path(out.dir, paste(family, \"_out_m.dr.squarei.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(K.p.ref.2$va, file = file.path(out.dir, paste(family, \"_out_evalues.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.nH, file = file.path(out.dir, paste(family, \"_out_nH.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.Pn, file = file.path(out.dir, paste(family, \"_out_Pn.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.d.evalues, file = file.path(out.dir, paste(family, \"_out_d.evalues.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(MSDi, file = file.path(out.dir, paste(family, \"_out_MSDi.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(MSD, file = file.path(out.dir, paste(family, \"_out_MSD.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(input, file = file.path(out.dir, paste(family, \"_input\", sep = \"\")), row.names = FALSE)\n",
    "created" : 1444053588915.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2500941997",
    "id" : "DDAB9252",
    "lastKnownWriteTime" : 1445211039,
    "path" : "C:/Users/Laurita/Desktop/Doctorado/VariabilidadEstructuralProteica/TheoreticalMain.R",
    "project_path" : "TheoreticalMain.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}