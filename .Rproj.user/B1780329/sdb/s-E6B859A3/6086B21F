{
    "contents" : "# INFORMACIÓN:\n#\n# El programa calcula medidas de variabilidad estructural y dinámica de alineamientos múltiples de \n# familias de proteínas provenientes de la base de datos de alineamientos múltiples \"Homstrad\".\n#\n# Para utilizar el programa se debe completar un input (\"DATA/Experimental/experimental_input.csv\") especificando: \n# -family:la familia de proteínas del alineamiento, que puede ser \"serinProteases\", \"globins\" o \"plastocyanins\"\n# -p.ref: la proteína de referncia que se desee utilizar, teniendo en cuenta que la misma debe ser escrita de \n# la misma forma en la que se encuentra en el dataset de la familia correspondiente \n# (ej:\"DATA/Experimental/serinProteases_dataset.csv\").\n# -heme: solo se utiliza para la familia de las globinas, puede ser \"TRUE\" o \"FALSE\", dependiendo de si \n# se desea o no considerar al grupo HEMO. \n# -model: el modelo de red elástica a usar, que solo puede ser \"ANM\" por el momento.\n# -R0: cut-off del ANM.\n# Remove objects.\nrm(list = ls())\n# Read input.\ndata.dir <- \"DATA/Experimental\"\ninput.fname <- file.path(data.dir, \"experimental_input.csv\")\ninput <- read.csv(input.fname)\nfamily <- input$family\np.ref <- input$p.ref \nheme <- input$heme\nmodel <- input$model\nR0 = input$R0\n# Files fnames.\nalignment.fname <- file.path(data.dir, paste(family, \"_alignment.txt\", sep = \"\"))  # File with the multiple sequence alignmet.\npdbs.fname <- file.path(data.dir, paste(family, \"_coordinates.pdb\", sep = \"\"))  # Coordinates of the proteins.\ndataset.fname <- file.path(data.dir, paste(family, \"_dataset.csv\", sep = \"\"))  # Dataset with pdbids and chains.\n# Functions fnames.\nReadCA.fname <- \"FUNCTIONS/ReadCA.R\" \nReadHeme.fname <- \"FUNCTIONS/ReadHeme.R\"  \nAnalyzeAlignment.fname <- \"FUNCTIONS/AnalyzeAlignment.R\" \nCalculateID.fname <- \"FUNCTIONS/CalculateID.R\" \nCalculateKeff.fname <- \"FUNCTIONS/CalculateKeff.R\"  \nCalculateK.fname <- \"FUNCTIONS/CalculateK.R\"  \nCalculateKij.fname <- file.path(\"FUNCTIONS\", paste(\"CalculateKij\", model, \".R\", sep = \"\")) \nCalculateVariability.fname <- \"FUNCTIONS/CalculateVariability.R\" \n# Output dir.\nout.dir <- \"OUT/Experimental\"\n# General parameters.\nTOLERANCE = 1e-10 \n# Load Librarys.\nlibrary(seqinr) \nlibrary(bio3d) \n# Source Functions.\nsource(ReadCA.fname) \nsource(ReadHeme.fname) \nsource(AnalyzeAlignment.fname)\nsource(CalculateID.fname)\nsource(CalculateKeff.fname)\nsource(CalculateK.fname)\nsource(CalculateKij.fname)\nsource(CalculateVariability.fname)\n# Read dataset.\ndataset <- read.csv(dataset.fname)\npdbids <- dataset$pdbid\nchains <- dataset$chain\nnprot = length(pdbids)\n# Read multiple alignment.\nalignments.ids <- read.fasta(alignment.fname)\nalignments <- alignments.ids$ali[, -ncol(alignments.ids$ali)]\n# Read PDB & alignment of p.ref.\nchain.p.ref <- chains[pdbids == as.character(p.ref)]\npdb.p.ref <- ReadCA(pdbs.fname, chain.p.ref)\nr.p.ref = pdb.p.ref$xyz.calpha\nnsites.p.ref = pdb.p.ref$nsites \nnaa.p.ref = nsites.p.ref \nif (family == \"globins\" & heme == \"TRUE\") {\n  r.heme.p.ref = ReadHeme(pdbs.fname, chain.p.ref)\n  r.p.ref = cbind(r.p.ref, r.heme.p.ref)\n  nsites.p.ref = ncol(r.p.ref)\n}\nalignment.p.ref <- alignments[alignments.ids$id == as.character(p.ref), ]\n# Measures of variability.\nm.laligned = matrix(ncol = 1, nrow = nprot)\nm.ID = matrix(ncol = 1, nrow = nprot)\nm.nH = matrix(ncol = 3 * naa.p.ref, nrow = nprot)\nm.Pn = matrix(ncol = 3 * naa.p.ref, nrow = nprot)\nm.evalues = matrix(ncol = 3 * naa.p.ref, nrow = nprot)\nm.d.evalues = matrix(ncol = 3 * naa.p.ref, nrow = nprot)\nm.dr.squarei = matrix(ncol = naa.p.ref, nrow = nprot)\nfor (P in (1:nprot)) {\n\t# Read PDB & alignment of p.2.\n\tchain.p.2 <- chains[[P]]\n\tpdb.p.2 <- ReadCA(pdbs.fname, chain.p.2)\n\tr.p.2 <- pdb.p.2$xyz.calpha\n\tnsites.p.2 <- pdb.p.2$nsites\n\tnaa.p.2 = nsites.p.2\n\tif (family == \"globins\" & heme == \"TRUE\") {\n\t  r.heme.p.2 = ReadHeme(pdbs.fname, chain.p.2)\n\t  r.p.2 = cbind(r.p.2, r.heme.p.2)\n\t  nsites.p.2 = ncol(r.p.2)\n\t}\n\talignment.p.2 <- alignments[alignments.ids$id == as.character(pdbids[P]), ]\t\n\t# Calculate %ID between P.ref y p.2.\n\tID.p.2 <- CalculateID(alignment.p.ref, alignment.p.2)\n\t# Analyze alignment of p.ref.\n\ta.alignment.p.ref <- AnalyzeAlignment(alignment.p.ref, alignment.p.2, naa.p.ref)\n\taligned.p.ref.index <- a.alignment.p.ref$aligned.index\n\tnaligned <- a.alignment.p.ref$naligned\n\tnot.aligned.p.ref.index <- a.alignment.p.ref$not.aligned.index\n\t# Analyze alignment of p.2.\n\ta.alignment.p.2 <- AnalyzeAlignment(alignment.p.2, alignment.p.ref, naa.p.2)\n\taligned.p.2.index <- a.alignment.p.2$aligned.index\n\tnot.aligned.p.2.index <- a.alignment.p.2$not.aligned.index\n\t# Add heme to not.aligned.\n\tif (family == \"globins\" & heme == \"TRUE\"){\n\t  not.aligned.p.ref.index <- cbind(not.aligned.p.ref.index, t(seq((naa.p.ref+1), nsites.p.ref)))\n\t  not.aligned.p.2.index <- cbind(not.aligned.p.2.index, t(seq((naa.p.2+1), nsites.p.2)))\n\t}\n\t# Rotate r.p.2 minimizing RMSD with P.ref.\n\taligned.p.ref.index3N = matrix(0, ncol = 3 * naligned, nrow = 1)\n\taligned.p.2.index3N = matrix(0, ncol = 3 * naligned, nrow = 1)\n  for (i in (1:naligned)) {\n    aligned.p.ref.index3N[1, ((3 * i - 2):(3 * i))] = c((3 * aligned.p.ref.index[i] - 2), (3 * aligned.p.ref.index[i] - 1),(3 * aligned.p.ref.index[i]))\n    aligned.p.2.index3N[1, ((3 * i - 2):(3 * i))] = c((3 * aligned.p.2.index[i] - 2), (3 * aligned.p.2.index[i] - 1),(3 * aligned.p.2.index[i]))\n  }\n\tr.p.2 <- matrix(fit.xyz(fixed = as.vector(r.p.ref),\n\t                       mobile = as.vector(r.p.2),\n\t                   fixed.inds = aligned.p.ref.index3N,\n                    mobile.inds = aligned.p.2.index3N), nrow = 3)\n\t# Get aligned coordinates.\n\tr.aligned.p.ref <- r.p.ref[, aligned.p.ref.index]\n\tr.aligned.p.2 <- r.p.2[, aligned.p.2.index]\n\t# Calculate dr.\n\tdr = r.aligned.p.2 - r.aligned.p.ref\n\t# Cakculate KEFF p.ref.\n\tKeff.p.ref <- CalculateKeff(r.p.ref, aligned.p.ref.index, not.aligned.p.ref.index, CalculateKij, R0, TOLERANCE)\t\n\tnmodes <- length(Keff.p.ref$va)\n\t# Calculate KEFF p.2.\n\tKeff.p.2 <- CalculateKeff(r.p.2, aligned.p.2.index, not.aligned.p.2.index, CalculateKij, R0, TOLERANCE)\t\n\t# Calculate measures of variability.\n\tVA <- CalculateVariability(dr, Keff.p.ref, Keff.p.2)\n\tm.ID[P] = ID.p.2\n  m.laligned[P] = naligned \n  m.nH[P, 1:nmodes] = t(VA$nH)\n  m.Pn[P, 1:nmodes] = t(VA$Pn)\n  m.d.evalues[P, 1:nmodes]  = t(VA$d.evalues[1:nmodes])\n\tm.evalues[P, 1:nmodes]  = t(Keff.p.ref$va[1:nmodes])\n\tdr.squarei = rbind(VA$dr.squarei, aligned.p.ref.index)\n\tfor (i in (1:naa.p.ref)){\n\t\tm.dr.squarei[P, i] = matrix(dr.squarei[1, dr.squarei[2, ] == i], ncol = 1, nrow = 1)\n\t}\n}\nP.index = (pdbids != as.character(p.ref))\nm.ID <- m.ID[P.index, ]\nm.laligned <- m.laligned[P.index, ]\nm.nH <- m.nH[P.index, ]\nm.Pn <- m.Pn[P.index, ]\nm.d.evalues <- m.d.evalues[P.index, ]\nm.evalues <- m.evalues[P.index, ]\nm.dr.squarei <- m.dr.squarei[P.index, ]\n# Calculate means.\nmean.nH = colMeans(m.nH, na.rm = T)\nmean.Pn = colMeans(m.Pn, na.rm = T)\nmean.d.evalues= colMeans(m.d.evalues, na.rm = T)\nmean.evalues= colMeans(m.evalues, na.rm = T)\nMSDi = colMeans(m.dr.squarei, na.rm = T)\nMSD = rowMeans(m.dr.squarei, na.rm = T)\n# Save information.\nif (family == \"globins\") {\n  family <- paste(family, \"_heme_\", heme, sep = \"\")\n}\nwrite.csv(m.laligned, file = file.path(out.dir, paste(family, \"_out_m.laligned.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.ID, file = file.path(out.dir, paste(family, \"_out_m.ID.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.nH, file = file.path(out.dir, paste(family, \"_out_m.nH.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.Pn, file = file.path(out.dir, paste(family, \"_out_m.Pn.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.d.evalues, file = file.path(out.dir, paste(family, \"_out_m.d.evalues.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.evalues, file = file.path(out.dir, paste(family, \"_out_m.evalues.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(m.dr.squarei, file = file.path(out.dir, paste(family, \"_out_m.dr.squarei.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.nH, file = file.path(out.dir, paste(family, \"_out_nH.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.Pn, file = file.path(out.dir, paste(family, \"_out_Pn.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.d.evalues, file = file.path(out.dir, paste(family, \"_out_d.evalues.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(mean.evalues, file = file.path(out.dir, paste(family, \"_out_evalues.mean.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(MSDi, file = file.path(out.dir, paste(family, \"_out_MSDi.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(MSD, file = file.path(out.dir, paste(family , \"_out_MSD.csv\", sep = \"\")), row.names = FALSE)\nwrite.csv(input, file = file.path(out.dir, paste(family , \"_input\", sep = \"\")), row.names = FALSE)\n",
    "created" : 1444841652223.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4246254585",
    "id" : "6086B21F",
    "lastKnownWriteTime" : 1445203180,
    "path" : "C:/Users/Laurita/Desktop/Doctorado/VariabilidadEstructuralProteica/ExperimentalMain.R",
    "project_path" : "ExperimentalMain.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}