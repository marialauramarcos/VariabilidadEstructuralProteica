{
    "collab_server" : "",
    "contents" : "# This function analyzes a multiple alignment of a family of proteins comparing a reference protein p.ref with the other proteins. \n#  It does two types of analysis:\n#  - CORE = TRUE: aligned and not aligned sites of p.ref and each p.2 that are in the \n# conserved core of the alignment: positions with no gaps in whole the alignemnt.\n#  - CORE = FALSE: all aligned and not aligned sites of p.ref and each p.2.\n#\n#  Args:\n#   family: the family of the protein to mutate. It can be \"globins\", \"serinProteases\", \n#   \"snakesToxin\", \"sh3\", \"fabp\", \"rrm\", \"phoslip\" or \"cys\".\n#   p.ref:  the pdb code (pdbid) of the protein to mutate (example: \"1a6m\"). The protein must be a member of\n#   the selected family. This pdbid must not be included in the dataset (\"DATA/family_dataset.csv\").\n#   data.dir: directory of the data. It must contain a file with the alignment of the family (\"data.dir/family_alignment.txt\") and \n#   a file with the dataset (\"data.dir/family_dataset.csv\").\n#   out.dir: output directory.\n#\n#  Requires:\n#   AnalyzeAlignment()\n#\n#  Returns:\n#   Files with the result of the analyisis in out.dir.\n\nAnalyzeFamily <- function(family, p.ref, data.dir, out.dir) {\n  \n  # Data filenames.\n  dataset.fname <- file.path(data.dir, paste(family, \"_dataset.csv\", sep = \"\"))  \n  alignment.fname <- file.path(data.dir, paste(family, \"_alignment.txt\", sep = \"\"))  \n  \n  # Read dataset.\n  dataset <- read.csv(dataset.fname)\n  pdbid.dataset <- as.character(dataset$pdbid) \n  n.prot = length(pdbid.dataset)\n  \n  # Read alignment.\n  alignment.id <- ReadFasta(alignment.fname)\n  alignment <- alignment.id$ali[, -ncol(alignment.id$ali)]  # The last column is \"*\".\n  pdbid.alignment <- alignment.id$id\n  l.alignment = ncol(alignment)\n  \n  # Create matrices to save data.\n  m.n.sites.p.ref = matrix(nrow = n.prot, ncol = 1)\n  m.n.sites.p.2 = matrix(nrow = n.prot, ncol = 1)\n  m.n.aligned = matrix(nrow = n.prot, ncol = 1)\n  m.aligned.p.ref.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.aligned.p.2.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.not.aligned.p.ref.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.not.aligned.p.2.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.n.aligned.mut.p.ref = matrix(nrow = n.prot, ncol = 1)\n  m.aligned.mut.p.ref.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.n.core = matrix(nrow = n.prot, ncol = 1)\n  m.core.p.ref.index = matrix(nrow = n.prot, ncol = l.alignment) \n  m.core.p.2.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.no.core.p.ref.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.no.core.p.2.index = matrix(nrow = n.prot, ncol = l.alignment)\n  m.identity = matrix(nrow = n.prot, ncol = 1)\n  \n  # Start a loop to evaluate each protein of the family.\n  for (P in (1:n.prot)) {\n    print(P)\n    \n    # Get pdbid of p.2.\n    p.2 <- pdbid.dataset[P]\n    \n    # Anylize the alignment.\n    analysis.alignment = AnalyzeAlignment(alignment, \n                                          pdbid.alignment,   \n                                          p.ref, \n                                          p.2)\n    \n    # Save analysis in the matrices.\n    m.n.sites.p.ref[P, ] = analysis.alignment$n.sites.p.ref\n    m.n.sites.p.2[P, ] = analysis.alignment$n.sites.p.2\n    m.n.aligned[P, ] = analysis.alignment$n.aligned\n    m.aligned.p.ref.index[P, 1:length(analysis.alignment$aligned.p.ref.index)] = analysis.alignment$aligned.p.ref.index\n    m.aligned.p.2.index[P, 1:length(analysis.alignment$aligned.p.2.index)] = analysis.alignment$aligned.p.2.index\n    if (length(analysis.alignment$not.aligned.p.ref.index) > 0) {\n      m.not.aligned.p.ref.index[P, 1:length(analysis.alignment$not.aligned.p.ref.index)] = analysis.alignment$not.aligned.p.ref.index\n    }\n    if (length(analysis.alignment$not.aligned.p.2.index) > 0) {\n      m.not.aligned.p.2.index[P, 1:length(analysis.alignment$not.aligned.p.2.index)] = analysis.alignment$not.aligned.p.2.index\n    }\n    m.n.aligned.mut.p.ref[P, ] = analysis.alignment$n.aligned.mut.p.ref\n    if (analysis.alignment$n.aligned.mut.p.ref > 0) {\n      m.aligned.mut.p.ref.index[P, 1:length(analysis.alignment$aligned.mut.p.ref.index)] = analysis.alignment$aligned.mut.p.ref.index\n    }\n    m.n.core[P, ] = analysis.alignment$n.core\n    m.core.p.ref.index[P, 1:length(analysis.alignment$core.p.ref.index)] = analysis.alignment$core.p.ref.index \n    m.core.p.2.index[P, 1:length(analysis.alignment$core.p.2.index)] = analysis.alignment$core.p.2.index\n    m.no.core.p.ref.index[P, 1:length(analysis.alignment$no.core.p.ref.index)] = analysis.alignment$no.core.p.ref.index\n    m.no.core.p.2.index[P, 1:length(analysis.alignment$no.core.p.2.index)] = analysis.alignment$no.core.p.2.index\n    m.identity[P, ] = analysis.alignment$identity\n  }\n  \n  \n  # Create files to save data.\n  write.csv(m.n.sites.p.ref, file = file.path(out.dir, paste(family, \"_out_m.n.sites.p.ref.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.n.sites.p.2, file = file.path(out.dir, paste(family, \"_out_m.n.sites.p.2.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.n.aligned, file = file.path(out.dir, paste(family, \"_out_m.n.aligned.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.aligned.p.ref.index, file = file.path(out.dir, paste(family, \"_out_m.aligned.p.ref.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.aligned.p.2.index, file = file.path(out.dir, paste(family, \"_out_m.aligned.p.2.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.not.aligned.p.ref.index, file = file.path(out.dir, paste(family, \"_out_m.not.aligned.p.ref.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.not.aligned.p.2.index, file = file.path(out.dir, paste(family, \"_out_m.not.aligned.p.2.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.n.aligned.mut.p.ref, file = file.path(out.dir, paste(family, \"_out_m.n.aligned.mut.p.ref.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.aligned.mut.p.ref.index, file = file.path(out.dir, paste(family, \"_out_m.aligned.mut.p.ref.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.n.core, file = file.path(out.dir, paste(family, \"_out_m.n.core.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.core.p.ref.index, file = file.path(out.dir, paste(family, \"_out_m.core.p.ref.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.core.p.2.index, file = file.path(out.dir, paste(family, \"_out_m.core.p.2.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.no.core.p.ref.index, file = file.path(out.dir, paste(family, \"_out_m.no.core.p.ref.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.no.core.p.2.index, file = file.path(out.dir, paste(family, \"_out_m.no.core.p.2.index.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.identity, file = file.path(out.dir, paste(family, \"_out_m.identity.csv\", sep = \"\")), row.names = FALSE)\n}\n",
    "created" : 1460308042987.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1166552346",
    "id" : "CCECC474",
    "lastKnownWriteTime" : 1460308179,
    "last_content_update" : 1460308179856,
    "path" : "C:/Users/Usuario/Desktop/VariabilidadEstructuralProteica/FUNCTIONS/AnalyzeFamily.R",
    "project_path" : "FUNCTIONS/AnalyzeFamily.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}