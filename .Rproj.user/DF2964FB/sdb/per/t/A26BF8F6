{
    "collab_server" : "",
    "contents" : "# This function generates mutants of a given protein using two possible models:\n# - \"LFENM\" (Linearly Forced - Elastic Network Model), considering additive single mutations.\n# - \"MND\" (Multivariate Normal Distribution), considering mu = dr expected value = 0 and Sigma = Cov.\n#\n#  Args:\n#    family: the family of the protein to mutate. It can be \"globins\", \"serinProteases\", \n#    \"snakesToxin\", \"sh3\", \"fabp\", \"rrm\", \"phoslip\" or \"cys\".\n#    exp.chain.p.ref: the chain of p.ref in the pdb file obtained from Homstrad.\n#    mut.model: mutational model. It can be \"LFENM\" (Linearly Forced - Elastic Network Model) or \"MND\" \n#    (Multivariate Normal Distribution).\n#    n.mut.p: the number of mutants to generate for each member of the family. For example, if the family has 20 \n#    members, the program generates n.mut.p x 20 mutants.\n#    fmax: argument for \"LFENM\". It is the maximun value for the forces that model the mutations.\n#    R0: the cut-off for the \"ANM\" (Anisotropic Network Model) that represents the proteins.\n#    heme: argument for \"globins\". It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program considers the heme group.\n#    natural.selection: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the mutants are calculated considering natural \n#    selection. If it is \"FALSE\", the mutants are calculated in a random manner.\n#    data.dir: directory of the data. It must contain the file the pdb file \n#    obtained from Homstrad (\"data.dir/family_coordinates.csv\").\n#    out.dir: output directory. It must contain the output of the function AnalyzeFamily().\n#    mut.fname.id: ID for output filenames.\n#    TOLERANCE: 0 tolerance.\n#\n#  Requires:\n#    ReadCA\n#    ReadHeme\n#    CalculateENMK\n#    CalculateForce\n#\n#  Returns:\n#    File with a vector of coordinates of p.ref in out.dir.\n#    File with a matrix of coordinates of the mutants in each column in out.dir.\n\nGenerateMutants <- function(family,\n                            exp.chain.p.ref,\n                            mut.model,\n                            n.mut.p,\n                            fmax, \n                            R0,\n                            heme,\n                            natural.selection,\n                            data.dir,\n                            out.dir,\n                            mut.fname.id,\n                            TOLERANCE) {\n  \n  # Filenames.\n  pdbs.fname <- file.path(data.dir, paste(family, \"_coordinates.pdb\", sep = \"\")) \n  m.identity.fname <- file.path(out.dir, paste(family, \"_out_m.identity.csv\", sep = \"\"))\n  \n  # Read PDB of p.ref.\n  pdb = ReadCA(pdbs.fname, exp.chain.p.ref)\n  r.p.ref = pdb$xyz.calpha\n  n.aa = pdb$n.sites\n  \n  # Calculate heme coordinates, add them to CAÂ´s coordinates and calculate the number of sites.\n  if (heme == \"TRUE\") {\n    r.heme = ReadHeme(pdbs.fname, exp.chain.p.ref)\n    r.p.ref = cbind(r.p.ref, r.heme)\n    n.sites = ncol(r.p.ref)\n  } else {\n    n.sites = n.aa\n  }\n  \n  # Enumerate sites of p.ref.\n  sites = seq(1:n.sites)\n  \n  # Calculate K of p.ref.\n  ENMK.p.ref = CalculateENMK(r.p.ref, CalculateKij, R0, TOLERANCE)\n  \n  # Get the % sequence identity between p.ref and the other proteins and get the number of proteins of the family.\n  m.identity = read.csv(m.identity.fname)$V1\n  n.prot = length(m.identity)\n  \n  # Create a matrix to save coordinates of each mutant.\n  m.r.mut = matrix(0, nrow = 3 * n.sites, ncol = n.prot * n.mut.p)\n  \n  # Calculate mutants using \"LF-ENM\".\n  if (mut.model == \"LFENM\") {\n\n    # Start a loop for each P.\n    for (P in (1:n.prot)) {\n      \n      # Get de sequence identity and the number of mutated sites of p.ref for P.\n      identity = m.identity[P]\n      n.sites.mut = (100 - (identity)) * n.aa / 100\n      \n      # Decide which sites to mutate for natural.selection == \"TRUE\".\n      if (natural.selection == \"TRUE\") {\n      \n        # Calculate the number of contacts of each site.\n        CN = ENMK.p.ref$kij\n        CN.i = colSums(CN)\n\n        # Calculate the probability of mutation of each site following the Stress Model (with beta = 1).\n        prob.i = 1 - CN.i\n      \n        # Get sites with more probability of mutation.\n        decreasing.prob = order(prob.i, decreasing = T)\n        mutated.index = decreasing.prob[1:n.sites.mut]\n      }\n      \n      # Start a loop to generate n.mut.p mutants for each P.\n      for(mut in seq(n.mut.p)) {\n        print(c(P, mut))\n        \n        # Get mutated sites of p.ref for each P and for natural.selection == \"FALSE\".\n        if (natural.selection == \"FALSE\") {\n          mutated.index = sample(1:n.aa, replace = F)[1:n.sites.mut]\n        }\n        \n        # Calculate forces.\n        f = rep(0, 3 * n.sites)\n        for (l in as.numeric(mutated.index)) {\n          fl = CalculateForce(l, r.p.ref, ENMK.p.ref$kij, fmax)\n          f = f + fl\n        }\n        \n        # Calculate dr and r.mut.\n        dr.mut = ENMK.p.ref$cov %*% f\n        r.mut = as.vector(r.p.ref) + dr.mut\n        \n        # Keep r.mut.\n        m.r.mut[, n.mut.p * P - (n.mut.p - mut)] = r.mut\n      }\n    }\n  }\n  \n  # Calculate mutants using \"MND\".\n  if (mut.model == \"MND\") {\n    \n    # Calculate the expected dr value for each site.\n    dr = matrix(0, nrow = 1, ncol = 3 * n.sites)\n    \n    # Start a loop to calculate coordinates of the mutants.\n    for (mut in seq(n.prot * n.mut.p)) {\n      print(mut)\n      \n      # Calculate dr and r.mut.\n      dr.mut =  mvrnorm(n = 1, dr, ENMK.p.ref$cov)\n      r.mut =  as.vector(r.p.ref) + dr.mut\n      \n      # Keep r.mut.\n      m.r.mut[, mut] = r.mut\n    }\n  }\n  \n  # Create files and save the data.\n  write.csv(as.vector(r.p.ref), file = file.path(out.dir, paste(mut.fname.id, \"_out_r.p.ref.csv\", sep = \"\")), row.names = FALSE)\n  write.csv(m.r.mut, file = file.path(out.dir, paste(mut.fname.id, \"_out_m.r.mut.csv\", sep = \"\")), row.names = FALSE)\n}",
    "created" : 1460250808099.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4051356519",
    "id" : "A26BF8F6",
    "lastKnownWriteTime" : 1460308125,
    "last_content_update" : 1460308125758,
    "path" : "C:/Users/Usuario/Desktop/VariabilidadEstructuralProteica/FUNCTIONS/GenerateMutants.R",
    "project_path" : "FUNCTIONS/GenerateMutants.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}