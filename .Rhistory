#    - generate.mutants: It can be "TRUE" or "FALSE". If it is "TRUE", the program generates new mutants.
#    - K.analysis: It can be "K" or "Keff". For "K" or "Keff", the analysis is based on normal modes of "K" or "Keff"
#    respectibly.
### PROGRAM ###
# remove objects from the workspace
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# data dir
data.dir <- "DATA"
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CM_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CM_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoreticalCM.fname <- "FUNCTIONS/AnalyzeExperimentalTheoreticalCM.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutantsCM.fname <- "FUNCTIONS/GenerateMutantsCM.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateSideChainCM.fname <- "FUNCTIONS/CalculateSideChainCM.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
CalculateDynamicalVariability.fname <- "FUNCTIONS/CalculateDynamicalVariability.R"
CalculateDaCMCA.fname <- "FUNCTIONS/CalculateDaCMCA.R"
GetCore.fname <- "FUNCTIONS/GetCore.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetasCM.fname <- "FUNCTIONS/CalculateBetasCM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetasCM.fname <- "FUNCTIONS/CalculateBetasCMPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoreticalCM.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutantsCM.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateSideChainCM.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateDynamicalVariability.fname)
source(CalculateDaCMCA.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetasCM.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CM[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core of the alignment
GetCore(family,
data.dir,
p.ref)
# calculate distances to the active site
CalculateDaCMCA(family,
p.ref,
chain.p.ref,
heme,
data.dir,
out.dir)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetasCM(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutantsCM(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoreticalCM(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
}
n.aligned = 10
factor = sort(rep(seq(1:n.aligned), 3))
factor
# load packages
library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
f = 1
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0 = R0.CM
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_structure_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
# set chunk options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
# load functions
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
# set my colors
myColors = c("blue", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "medium", "mut+sel")
# set significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
# set input filenames
## data
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.ca.csv", sep = ""))
min.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_min.da.CM.ca.csv", sep = ""))
## profiles to compare
### square.dif.MSF
square.dif.MSF.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.square.dif.MSF.csv", sep = ""))
square.dif.MSF.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.square.dif.MSF.csv", sep = ""))
square.dif.MSF.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.square.dif.MSF.csv", sep = ""))
# which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
if (reference != p.ref) {
print("Warning: different references")
}
# experimental protein names
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
protein.exp = protein.exp[protein.exp != reference]
print(protein.exp)
# prepare the data
square.dif.MSF.exp = read.csv(square.dif.MSF.exp.fname, header = T)
rownames(square.dif.MSF.exp) = protein.exp
square.dif.MSF.exp = read.csv(square.dif.MSF.exp.fname, header = T)
square.dif.MSF.exp
square.dif.MSF.exp
square.dif.MSF.mut = read.csv(square.dif.MSF.mut.fname, header = T)
rownames(square.dif.MSF.mut) = paste("mut", rownames(square.dif.MSF.mut), sep = "")
square.dif.MSF.medium = read.csv(square.dif.MSF.medium.fname, header = T)
rownames(square.dif.MSF.medium) = paste("medium", rownames(square.dif.MSF.medium), sep = "")
square.dif.MSF.mut
square.dif.MSF.mut
ncol(square.dif.MSF.mut)
family
n.exp
protein.exp
nrow(square.dif.MSF.mut)
square.dif.MSF.exp
square.dif.MSF.exp
nrow(square.dif.MSF.exp)
rownames(square.dif.MSF.exp) = protein.exp
rownames(square.dif.MSF.exp) = protein.exp
rownames(square.dif.MSF.exp)
rownames(square.dif.MSF.exp) = protein.exp
protein.exp
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:10,], na.rm = T)
mean.square.dif.MSF.mut = colMeans(square.dif.MSF.mut)
mean.square.dif.MSF.medium = colMeans(square.dif.MSF.medium)
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
cor.df = data.frame("comparison" = c("exp vs mut", "exp vs medium", "mut vs medium"),
"R" = c(r.exp.mut, r.exp.medium, r.mut.medium))
mean.square.dif.MSF.exp
mean.square.dif.MSF.mut
mean.square.dif.MSF.medium
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
r.exp.mut = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.mut)
r.exp.medium = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
r.mut.medium = cor(mean.square.dif.MSF.mut, mean.square.dif.MSF.medium)
cor.df = data.frame("comparison" = c("exp vs mut", "exp vs medium", "mut vs medium"),
"R" = c(r.exp.mut, r.exp.medium, r.mut.medium))
knitr::kable(cor.df, digits = 2)
cor.df
cor.df
mean.square.dif.MSF.exp
plot(mean.square.dif.MSF.exp)
points(mean.square.dif.MSF.exp, col = "red")
plot(mean.square.dif.MSF.exp)
points(mean.square.dif.MSF.mut, col = "red")
plot(scale(mean.square.dif.MSF.exp))
points(scale(mean.square.dif.MSF.mut), col = "red")
points(scale(mean.square.dif.MSF.mut[20:140]), col = "red")
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp, na.rm = T)
mean.square.dif.MSF.mut = colMeans(square.dif.MSF.mut)
mean.square.dif.MSF.medium = colMeans(square.dif.MSF.medium)
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
r.exp.mut = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.mut)
r.exp.medium = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
r.mut.medium = cor(mean.square.dif.MSF.mut, mean.square.dif.MSF.medium)
cor.df = data.frame("comparison" = c("exp vs mut", "exp vs medium", "mut vs medium"),
"R" = c(r.exp.mut, r.exp.medium, r.mut.medium))
knitr::kable(cor.df, digits = 2)
cor.df
plot(scale(mean.square.dif.MSF.exp))
points(scale(mean.square.dif.MSF.mut[20:140]), col = "red")
plot(scale(mean.square.dif.MSF.exp[20:140]))
points(scale(mean.square.dif.MSF.mut[20:140]), col = "red")
points(scale(mean.square.dif.MSF.medium[20:140]), col = "blue")
r.exp.medium
cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
plot(scale(mean.square.dif.MSF.mut[20:140]), col = "red")
plot(scale(mean.square.dif.MSF.mut[20:140]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[10:140]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[5:140]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[5:145]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[5:146]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[4:146]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[1:146]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[2:146]), col = "red", ylab = "x")
plot(scale(mean.square.dif.MSF.mut[3:146]), col = "red", ylab = "x")
points(scale(mean.square.dif.MSF.exp[3:146]), col = "blue", ylab = "x")
points(scale(mean.square.dif.MSF.medium[3:146]), col = "green", ylab = "x")
plot(x = mean.square.dif.MSF.exp,
y = mean.square.dif.MSF.mut,
xlab = "exp.mean.square.dif.MSF",
ylab = "mut.mean.square.dif.MSF")
abline(0, 1)
plot(x = mean.square.dif.MSF.exp,
y = mean.square.dif.MSF.mut,
ylab = "mut.mean.square.dif.MSF")
plot(x = mean.square.dif.MSF.exp[3:146],
y = mean.square.dif.MSF.mut[3:146])
abline(0, 1)
cor(mean.square.dif.MSF.exp[3:146], mean.square.dif.MSF.mut[3:146])
cor(mean.square.dif.MSF.exp[3:146], mean.square.dif.MSF.medium[3:146])
cor(mean.square.dif.MSF.mut[3:146], mean.square.dif.MSF.medium[3:146])
mean.square.dif.MSF.exp
mean.square.dif.MSF.exp[-c(1,2,3)]
length(mean.square.dif.MSF.exp[-c(1,2,3)])
n.sites = length(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = mean.square.dif.MSF.exp[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
mean.square.dif.MSF.exp
length(mean.square.dif.MSF.exp)
mean.square.dif.MSF.mut = mean.square.dif.MSF.mut[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
mean.square.dif.MSF.medium = mean.square.dif.MSF.medium[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp, na.rm = T)
mean.square.dif.MSF.mut = colMeans(square.dif.MSF.mut)
mean.square.dif.MSF.medium = colMeans(square.dif.MSF.medium)
# remove too divergent sites
n.sites = length(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = mean.square.dif.MSF.exp[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
mean.square.dif.MSF.mut = mean.square.dif.MSF.mut[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
mean.square.dif.MSF.medium = mean.square.dif.MSF.medium[-c(1,2,3,4,(n.sites-3), (n.sites-2), (n.sites-1), n.sites)]
# scale profiles
mean.square.dif.MSF.exp = scale(mean.square.dif.MSF.exp)
mean.square.dif.MSF.mut = scale(mean.square.dif.MSF.mut)
mean.square.dif.MSF.medium = scale(mean.square.dif.MSF.medium)
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
points(mean.square.dif.MSF.mut, col = "green")
points(mean.square.dif.MSF.medium, col = "red")
r.exp.mut = cor(mean.square.dif.MSF.exp[3:146], mean.square.dif.MSF.mut[3:146])
r.exp.medium = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
r.mut.medium = cor(mean.square.dif.MSF.mut, mean.square.dif.MSF.medium)
r.exp.mut
r.exp.mut = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.mut)
r.exp.medium = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
r.mut.medium = cor(mean.square.dif.MSF.mut, mean.square.dif.MSF.medium)
r.exp.mut
plot(x = mean.square.dif.MSF.exp,
y = mean.square.dif.MSF.mut,
xlab = "exp.mean.square.dif.MSF",
ylab = "mut.mean.square.dif.MSF")
abline(0, 1)
plot(x = mean.square.dif.MSF.exp,
y = mean.square.dif.MSF.medium,
xlab = "exp.mean.square.dif.MSF",
ylab = "medium.mean.square.dif.MSF")
abline(0, 1)
plot(x = mean.square.dif.MSF.mut,
y = mean.square.dif.MSF.medium,
xlab = "mut.mean.square.dif.MSF",
ylab = "medium.mean.square.dif.MSF")
abline(0, 1)
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_dynamical_MSF_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0 = R0.CM
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_dynamical_MSF_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
f
f = 6
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_dynamical_MSF_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
sclae(1,2,100)
sclae(c(1,2,100))
scale(c(1,2,100))
mean.square.dif.MSF.exp = rank(mean.square.dif.MSF.exp)
mean.square.dif.MSF.mut = rank(mean.square.dif.MSF.mut)
mean.square.dif.MSF.medium = rank(mean.square.dif.MSF.medium)
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
plot(mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site", col = "blue")
points(mean.square.dif.MSF.mut, col = "green")
points(mean.square.dif.MSF.medium, col = "red")
r.exp.mut = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.mut)
r.exp.medium = cor(mean.square.dif.MSF.exp, mean.square.dif.MSF.medium)
r.mut.medium = cor(mean.square.dif.MSF.mut, mean.square.dif.MSF.medium)
r.exp.mut
r.exp.medium
r.mut.medium
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
### MSF
rmarkdown::render('analysis-dynamical-MSF.Rmd',
output_file =  paste("OUT/report_dynamical_MSF_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD windows contacts rot
#rmarkdown::render('analysis-structure-window-contacts.Rmd',
#                  output_file =  paste("OUT/report_structure_window_contacts_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### local enviroment
#rmarkdown::render('analysis-structure-local-enviroment.Rmd',
#                  output_file =  paste("OUT/report_structure_local_enviroment_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
### MSF
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
### nH
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD windows contacts rot
#rmarkdown::render('analysis-structure-window-contacts.Rmd',
#                  output_file =  paste("OUT/report_structure_window_contacts_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### local enviroment
#rmarkdown::render('analysis-structure-local-enviroment.Rmd',
#                  output_file =  paste("OUT/report_structure_local_enviroment_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
# generate reports
### nR
rmarkdown::render('analysis-dynamical-nR.Rmd',
output_file =  paste("OUT/report_dynamical_nR_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD windows contacts rot
#rmarkdown::render('analysis-structure-window-contacts.Rmd',
#                  output_file =  paste("OUT/report_structure_window_contacts_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### local enviroment
#rmarkdown::render('analysis-structure-local-enviroment.Rmd',
#                  output_file =  paste("OUT/report_structure_local_enviroment_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
f
family
input
f = 1
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
# generate reports
## CA
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
