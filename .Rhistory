modeComparison.medium = ddply(modeComparison.medium, "protein", mutate, "nH" = nH / mean(nH, na.rm = T))
tnH.mut = as.data.frame(t(as.matrix(nH.mut)))
tnH.mut = cbind(data.frame("mode" = mode), tnH.mut)
modeComparison.mut = melt(tnH.mut, "mode", variable.name = "protein", value.name = "nH")
modeComparison.mut = ddply(modeComparison.mut, "protein", mutate, "nH" = nH / mean(nH, na.rm = T))
tnH.exp = as.data.frame(t(as.matrix(nH.exp)))
tnH.exp = cbind(data.frame("mode" = mode), tnH.exp)
modeComparison.exp = melt(tnH.exp, "mode", variable.name = "protein", value.name = "nH")
modeComparison.exp = ddply(modeComparison.exp, "protein", mutate, "nH" = nH / mean(nH, na.rm = T))
# modeComparison.exp has NA's because for proteins with gaps when using Keff there're less modes
#print("Warning: modeComparison.exp <- na.omit(modeComparison.exp)")
modeComparison.exp <- na.omit(modeComparison.exp)
modeComparison.medium <- na.omit(modeComparison.medium)
modeComparison.mut <- na.omit(modeComparison.mut)
modeComparison.all.datasets = rbind(data.frame("dataset" = "exp", modeComparison.exp),                                                   data.frame("dataset" = "mut", modeComparison.mut),
data.frame("dataset" = "medium", modeComparison.medium))
dat = modeComparison.all.datasets
dat$dataset = revalue(dat$dataset, c("medium" = "selection"))
dat$dataset = revalue(dat$dataset, c("mut" = "no-selection"))
# calculate dataset of means
d = ddply(dat,c("dataset", "mode"), function(x) {
mean.nH = mean(x$nH)
data.frame(mean.nH)
})
# calculate correlations berween profiles
d.exp = subset(d, dataset == "exp")
d.mut = subset(d, dataset == "no-selection")
d.medium = subset(d, dataset == "selection")
# get means
mean.nH.exp =  subset(d, dataset == "exp")$mean.nH
mean.nH.mut = d.mut = subset(d, dataset == "no-selection")$mean.nH
mean.nH.medium = subset(d, dataset == "selection")$mean.nH
plot(mean.nH.exp, ylab = "<z.nH>", xlab = "mode", col = "blue")
mean.nH.exp
mean.nH.exp
length(mean.nH.exp)
length(mean.nH.mut)
length(mean.nH.medium)
f
f=5
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
### Pn
rmarkdown::render('analysis-structure-normal-modes.Rmd',
output_file =  paste("OUT/report_structure_CA_normal_modes_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### MSF
rmarkdown::render('analysis-dynamical-MSF-structure.Rmd',
output_file =  paste("OUT/report_dynamical_MSF_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### nH
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
tenergy.mut
tenergy.mut
tenergy.mut[1,]
tenergy.exp[1,]
tenergy.exp[,1]
tenergy.exp[,2]
tenergy.exp[1:10,2]
tenergy.mut[1:10,2]
cor(tenergy.mut[1:10,2],tenergy.exp[1:10,2])
plot(tenergy.mut[1:10,2],tenergy.exp[1:10,2])
cor(energy.mut[1:10,2],energy.exp[1:10,2])
cor(energy.mut[2:10,2],energy.exp[2:10,2])
f = 4
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
rmarkdown::render('analysis-structure-normal-modes.Rmd',
output_file =  paste("OUT/report_structure_CA_normal_modes_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### nH
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
# load packages
library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### nH
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
## CM
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0 = R0.CM
### nH
rmarkdown::render('analysis-dynamical-nH.Rmd',
output_file =  paste("OUT/report_dynamical_nH_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### nR
#rmarkdown::render('analysis-dynamical-nR.Rmd',
#                  output_file =  paste("OUT/report_dynamical_nR_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD core
#rmarkdown::render('analysis-structure-core.Rmd',
#                  output_file =  paste("OUT/report_structure_CM_core_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD windows contacts rot
#rmarkdown::render('analysis-structure-window-contacts.Rmd',
#                  output_file =  paste("OUT/report_structure_window_contacts_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### local enviroment
#rmarkdown::render('analysis-structure-local-enviroment.Rmd',
#                  output_file =  paste("OUT/report_structure_local_enviroment_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
### PROGRAM ###
# load packages
library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
## comparisons between families
rmarkdown::render('comparison_families.Rmd',
output_file =  paste("OUT/report_comparison_families", ".html", sep = ''))
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
# generate reports - comparisons CA - CM and R0s
## comparisons CA CM
R0.CA = 12.5
R0.CM = 10
rmarkdown::render('comparison_CA_CM.Rmd',
output_file =  paste("OUT/report_comparison_CA_CM_", family, "_", enm,"_R0_", R0.CA, "_", R0.CM, ".html", sep = ''))
## comparison R0s
### CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0.1 = 10
R0.2 = 12.5
rmarkdown::render('comparison_R0.Rmd',
output_file =  paste("OUT/report_comparison_CA_", family, "_", enm,"_R0_", R0.1, "_", R0.2, ".html", sep = ''))
### CM
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0.1 = 7.5
R0.2 = 10
rmarkdown::render('comparison_R0.Rmd',
output_file =  paste("OUT/report_comparison_CM_", family, "_", enm,"_R0_", R0.1, "_", R0.2, ".html", sep = ''))
}
e = c(1exp(1), 1exp(2))
e = c(1*exp(1), 1*exp(2))
e
e = c(1*exp(1), 1*exp(2), 1*exp(1))
e = c(1*exp(1), 1*exp(2), 1*exp(3), 1*exp(4), 1*exp(5), 1*exp(6)
)
e
plot(e)
plot(-e)
plot(y=-e, x=seq(1:6))
plot(y=e, x=seq(1:6))
cor(y=e, x=seq(1:6))
cor(y=ln(e), x=seq(1:6))
cor(y=log(e), x=seq(1:6))
plot(y=log(e), x=seq(1:6))
plot(y=log(e), x=-seq(1:6))
plot(y=(e), x=-seq(1:6))
plot(y=log(e), x=-seq(1:6))
# load packages
library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
## CM
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0 = R0.CM
### Pn
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
vscale()
vscale
scale
scale()
scale
help(scale)
c(1,2,3,4)
sclae(c(1,2,3,4))
scale(c(1,2,3,4))
plot(scale(c(1,2,3,4)))
plot(c(1,2,3,4))
plot(scale(c(1,2,3,4)))
scale(c(1,2,3,4))
scale(c(1,2,3,4))[1]
scale(c(1,2,3,4))[2]
scale(c(1.1,2,3,4.2,5.1))
cor(scale(c(1.1,2,3,4.2,5.1), seq(1:5))
)
cor(scale(c(1.1,2,3,4.2,5.1)), seq(1:5))
cor((c(1.1,2,3,4.2,5.1)), seq(1:5))
cor(norm(c(1.1,2,3,4.2,5.1)), seq(1:5))
cor(norm(c(1.1,2,3,4.2,5.1)), seq(1:5))
cor((c(1.1,2,3,4.2,5.1)/mean(c(1.1,2,3,4.2,5.1))), seq(1:5))
scale(c(1.1,2,3,4.2,5.1))
sd(scale(c(1.1,2,3,4.2,5.1)))
mean(c(1.1,2,3,4.2,5.1))
mean(scale(c(1.1,2,3,4.2,5.1)))
sd((c(1.1,2,3,4.2,5.1)/mean(c(1.1,2,3,4.2,5.1)))
)
sd((c(1.1,2,3,4.2,5.1,6,7)/mean(c(1.1,2,3,4.2,5.1,6,7)))
)
mean((c(1.1,2,3,4.2,5.1,6,7)/mean(c(1.1,2,3,4.2,5.1,6,7)))
)
# set chunk options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
# load functions
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
source("FUNCTIONS/readCA.R")
# set my colors
myColors = c("blue", "darkgreen", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "no-selection", "medium", "selection")
# set significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
# set input filenames
## data
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.ca.csv", sep = ""))
min.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_min.da.CM.ca.csv", sep = ""))
sum.inv.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_sum.inv.da.CM.ca.csv", sep = ""))
functional.sites.fname = file.path("DATA", paste(p.ref, "_functionalSites.csv", sep = ""))
## profiles to compare
dri2.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.norm.dr.squarei.csv", sep = ""))
dri2.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
dri2.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
## consurf
score.fname = file.path(data.dir, paste(p.ref, "_consurf.csv", sep = ""))
sim.data.mut.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_out_df.data.csv", sep = ""))
sim.data.medium.sel.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_out_df.data.csv", sep = ""))
# which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
if (reference != p.ref) {
print("Warning: different references")
}
# which are the functional sites?
functional.sites = read.csv(functional.sites.fname, sep = ";")
active.site.index = functional.sites$index
description = functional.sites$description
function.info = data.frame(active.site.index, description)
print(function.info)
# read experimental data obtained from ConsurfDB
consurf = read.csv(score.fname, sep = ";")
score = consurf$SCORE
# read simulated data
## no sel
sim.data.mut = read.csv(sim.data.mut.fname)
mut.site.mut = sim.data.mut$site
accept.mut = sim.data.mut$accept
## medium sel
sim.data.medium.sel = read.csv(sim.data.medium.sel.fname)
mut.site.medium.sel = sim.data.medium.sel$site
accept.medium.sel = sim.data.medium.sel$accept
# calculate p.accept of simulated data
p.accept.mut = c()
p.accept.medium.sel = c()
# correct indexes
if (data.dir == "OUT/out_subset_CM_ANM") {
mut.site.mut = mut.site.mut - n.sites
mut.site.medium.sel = mut.site.medium.sel - n.sites
CN.CM = sim.data.mut$CN
CN = c()
for (i in (1:n.sites)) {
CN[i] = CN.CM[which(mut.site.mut == i)][1]
}
}
for (i in (1:n.sites)) {
accept.mut.i = accept.mut[which(mut.site.mut == i)]
p.accept.mut.i = mean(accept.mut.i)
p.accept.mut[i] = p.accept.mut.i
accept.medium.sel.i = accept.medium.sel[which(mut.site.medium.sel == i)]
p.accept.medium.sel.i = mean(accept.medium.sel.i)
p.accept.medium.sel[i] = p.accept.medium.sel.i
}
# compare exp vs no sel profiles
## plot
par(pty = "s")
coord_cartesian(ylim = c(-3,3)) +
)
plot(x = log(p.accept.mut), y = CN, xlab = "log(paccept no-selection)")
plot(x = log(p.accept.medium), y = CN, xlab = "log(paccept no-selection)")
plot(x = log(p.accept.medium.sel), y = CN, xlab = "log(paccept no-selection)")
plot(x = (p.accept.medium.sel), y = CN, xlab = "log(paccept no-selection)")
plot(x = (p.accept.medium.sel), y = log(CN), xlab = "log(paccept no-selection)")
cor(x = (p.accept.medium.sel), y = log(CN))
cor(x = log(p.accept.medium.sel), y = (CN))
cor(x = ln(p.accept.medium.sel), y = (CN))
help("logLik.nlrq")
help(log)
e
cor(x = log(p.accept.medium.sel, e[1]), y = (CN))
e[1]
cor(x = log(p.accept.medium.sel, 10), y = (CN))
log(p.accept.medium.sel, 10)[1:5]
log(p.accept.medium.sel, e[1])[1:5]
log(p.accept.medium.sel, e[2])[1:5]
log(p.accept.medium.sel, e[1])[1:5]
cor(log(p.accept.medium.sel, e[1])[1:5],log(p.accept.medium.sel, 10)[1:5])
r.score.CN = cor(score, CN)
cor(score, CN)
plot(score, CN)
plot(score, log(CN))
cor(score, log(CN))
cor(p.accept.medium.sel, log(score))
cor(p.accept.mut, log(score))
cor(p.accept.mut,score)
score
cor(p.accept.medium.sel, score)
cor(log(p.accept.medium.sel), score)
d.exp$mean.z.RSD, y = log(CN)
cor(d.exp$mean.z.RSD, y = log(CN)
)
cor(log(d.exp$mean.z.RSD), y = (CN))
f
family
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
rmarkdown::render('analysis-structure-core.Rmd',
output_file =  paste("OUT/report_structure_CA_core_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
active.site.index
active.siteS
active.sites
family
# set chunk options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
# load functions
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
source("FUNCTIONS/readCA.R")
# set my colors
myColors = c("blue", "darkgreen", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "no-selection", "medium", "selection")
# set significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
# set input filenames
## data
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.ca.csv", sep = ""))
min.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_min.da.CM.ca.csv", sep = ""))
sum.inv.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_sum.inv.da.CM.ca.csv", sep = ""))
functional.sites.fname = file.path("DATA", paste(p.ref, "_functionalSites.csv", sep = ""))
## profiles to compare
dri2.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.norm.dr.squarei.csv", sep = ""))
dri2.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
dri2.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
## consurf
score.fname = file.path(data.dir, paste(p.ref, "_consurf.csv", sep = ""))
sim.data.mut.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_out_df.data.csv", sep = ""))
sim.data.medium.sel.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_out_df.data.csv", sep = ""))
# which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
if (reference != p.ref) {
print("Warning: different references")
}
# which are the functional sites?
functional.sites = read.csv(functional.sites.fname, sep = ";")
active.site.index = functional.sites$index
description = functional.sites$description
function.info = data.frame(active.site.index, description)
print(function.info)
print(function.info)
# experimental protein names
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
protein.exp = protein.exp[protein.exp != reference]
print(protein.exp)
# read site information of the reference protein
site.info = read.csv(site.info.fname, header = T, sep = ",")
m.min.da.CM.CA = read.csv(min.da.CM.CA.fname)
m.sum.inv.da.CM.CA = read.csv(sum.inv.da.CM.CA.fname)
# add info to site.info
d = ddply(site.info, "site", .fun = function(x) data.frame("da" = min(x[, c(-1, -2)])))
# define shells of active.sites site neighborhood
d$shell = cut(d$da, breaks = c(-.1, 2.5, 7.5, 12.5, 17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5, max(d$da)))
levels(d$shell) = seq(length(levels(d$shell))) - 1 # rename shell levels
site.info = merge(site.info, d, by = "site")
# read reference pdb and calculate resno, AA, and CN
reference.pdb.fname = file.path(data.dir,paste(reference, ".pdb", sep = ""))
ref.pdb = read.pdb(reference.pdb.fname)
inds = atom.select(ref.pdb, elety = "CA")
ref.pdb.ca = ref.pdb$atom[inds$atom,]
cmap.ca = cmap(ref.pdb$xyz[inds$xyz], dcut = R0, scut = 0, mask.lower = F)
CN = rowSums(cmap.ca, na.rm = T) - 1 # diag(cmap.ca) returned by cmap is 1!
n.sites = length(CN)
AA = ref.pdb.ca$resid
resno = ref.pdb.ca$resno
pdb.info = data.frame(resno, AA, CN)
names(pdb.info) = c("resno", "AA", paste("CN", as.character(R0), sep = ""))
# add pdb.info to site.info
site.info = cbind(site.info, pdb.info)
# read data
## exp
dri2.exp = read.csv(dri2.exp.fname, header = T)
site = site.info$site
dri2.exp = dri2.exp[1:length(protein.exp), site]
rownames(dri2.exp) = protein.exp
## mut
dri2.mut = read.csv(dri2.mut.fname, header = T)
rownames(dri2.mut) = paste("mut", rownames(dri2.mut), sep = "")
## medium
dri2.medium = read.csv(dri2.medium.fname, header = T)
rownames(dri2.medium) = paste("medium", rownames(dri2.medium), sep = "")
# prepare the data
## exp
tdri2.exp = as.data.frame(t(as.matrix(dri2.exp)))
tdri2.exp = cbind(site.info, tdri2.exp)
siteComparison.exp = melt(tdri2.exp, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
## mut
tdri2.mut = as.data.frame(t(as.matrix(dri2.mut)))
tdri2.mut = cbind(site.info, tdri2.mut)
siteComparison.mut = melt(tdri2.mut, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
## medium
tdri2.medium = as.data.frame(t(as.matrix(dri2.medium)))
tdri2.medium = cbind(site.info, tdri2.medium)
siteComparison.medium = melt(tdri2.medium, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
# bluild the data.frame
siteComparison.all.datasets = rbind(data.frame("dataset" = "exp", siteComparison.exp),
data.frame("dataset" = "mut", siteComparison.mut),
data.frame("dataset" = "medium", siteComparison.medium))
siteComparison.all.datasets = ddply(siteComparison.all.datasets, c("dataset", "protein"), mutate,
"n.SD" = dri2/mean(dri2, na.rm = T),
"z.SD" = vscale(dri2),
"RSD" = sqrt(dri2),
"n.RSD" = RSD/mean(RSD, na.rm = T),
"z.RSD" = vscale(RSD))
contacts.active.sites = d$site[d$shell == 1]
contacts.active = d$site[d$shell == 0]
contacts.active
active.site.index
p = ggplot(d, aes(x = site, y = mean.z.RSD, col = dataset, fill = dataset)) +
geom_line() +
geom_ribbon(aes(ymin = mean.z.RSD - f95 * se.z.RSD, ymax = mean.z.RSD + se.z.RSD), alpha = .4, show.legend = F) +
geom_vline(xintercept = active.sites, show.legend = F) +
geom_vline(xintercept = contacts.active.sites, col = "grey", show.legend = F) +
labs(x = "site", y = "<zRSDi>") +
coord_cartesian(ylim = c(-2,3.5)) +
scale_colour_manual(name = NULL, values = myColors) +
scale_fill_manual(name = NULL, values = myColors)
p
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
