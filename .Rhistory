m.exp.va = matrix(nrow = n.prot, ncol = 3 * (n.sites.p.ref))
m.exp.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
m.exp.norm.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
m.exp.smooth.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
m.exp.smooth.norm.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
P = 1
n.aligned = as.numeric(m.n.aligned[P, ])
aligned.p.ref.index = as.numeric(m.aligned.p.ref.index[P, !is.na(m.aligned.p.ref.index[P, ])])
aligned.p.2.index = as.numeric(m.aligned.p.2.index[P, !is.na(m.aligned.p.2.index[P, ])])
not.aligned.p.ref.index = as.numeric(m.not.aligned.p.ref.index[P, !is.na(m.not.aligned.p.ref.index[P, ])])
not.aligned.p.2.index = as.numeric(m.not.aligned.p.2.index[P, !is.na(m.not.aligned.p.2.index[P, ])])
# Read PDB of exp.p.2
chain.p.2 <- chain[[P]]
exp.pdb.p.2 = ReadCA(pdbs.fname, chain.p.2)
exp.r.p.2 = exp.pdb.p.2$xyz.calpha
exp.n.aa.p.2 = exp.pdb.p.2$n.sites
exp.n.aa.p.2
heme
if (heme == "TRUE") {
exp.r.heme.p.2 = ReadHeme(pdbs.fname, chain.p.2)
exp.r.p.2 = cbind(exp.r.p.2, exp.r.heme.p.2)
exp.n.sites.p.2 = ncol(exp.r.p.2)
aligned.p.ref.index <- c(aligned.p.ref.index, t(seq((n.aa.p.ref + 1), n.sites.p.ref)))
aligned.p.2.index <- c(aligned.p.2.index, t(seq((exp.n.aa.p.2 + 1), exp.n.sites.p.2)))
}
exp.variability = CalculateVariability(as.vector(exp.r.p.ref),
as.vector(exp.r.p.2),
aligned.p.ref.index,
aligned.p.2.index,
not.aligned.p.ref.index,
not.aligned.p.2.index,
R0,
rotate,
K.analysis,
tolerance)
exp.r.p.ref
length(exp.r.p.ref)/3
length(exp.r.p.2)/3
aligned.p.ref.index
length(aligned.p.ref.index)
length(not.aligned.p.ref.index)
40+39
length(exp.r.p.2)/3
not.aligned.p.ref.index
length(not.aligned.p.ref.index)
exp.r.p.2
91
aligned.p.2.index
length(aligned.p.2.index)
length(not.aligned.p.2.index)
dataset.fname <- file.path(data.dir, paste(family, "_dataset.csv", sep = ""))
alignment.fname <- file.path(data.dir, paste(family, "_alignment.txt", sep = ""))
# Read the dataset
dataset <- read.csv(dataset.fname)
pdbid.dataset <- as.character(dataset$pdbid)
n.prot = length(pdbid.dataset)
# Read the alignment
alignment.id <- ReadFasta(alignment.fname)
alignment <- alignment.id$ali[, -ncol(alignment.id$ali)]  # The last column is "*"
l.alignment = ncol(alignment)
pdbid.alignment <- alignment.id$id
P = 1
p.2 <- pdbid.dataset[P]
analysis.alignment = AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
p.ref
pdbid.alignment
p.ref
p.ref = "1fxla2"
AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
p.ref = "1fxla1"
AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
analysis.alignment = AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
p.ref = "1fxla2"
analysis.alignment = AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
pdbid.alignment
as.vector(exp.r.p.ref)
length(exp.r.p.ref)
length(exp.r.p.ref)/3
aligned.p.ref.index
length(aligned.p.ref.index)
length(not.aligned.p.ref.index)
40+39
p.ref
p.2 <- pdbid.dataset[P]
P
analysis.alignment = AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
analysis.alignment$n.aligned
analysis.alignment$not.aligned.p.ref.index
p.ref="1fxla1"
analysis.alignment = AnalyzeAlignment(alignment,
pdbid.alignment,
p.ref,
p.2)
analysis.alignment$n.sites.p.ref
analysis.alignment$n.aligned
analysis.alignment$not.aligned.p.ref.index
dataset.fname <- file.path(data.dir, paste(family, "_dataset.csv", sep = ""))
pdbs.fname <- file.path(data.dir, paste(family, "_coordinates.pdb", sep = ""))
m.n.aligned.fname <- file.path(out.dir, paste(family, "_out_m.n.aligned.csv", sep = ""))
m.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.ref.index.csv", sep = ""))
m.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.2.index.csv", sep = ""))
m.not.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.ref.index.csv", sep = ""))
m.not.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.2.index.csv", sep = ""))
# Read the dataset
dataset <- read.csv(dataset.fname)
pdbid.dataset <- as.character(dataset$pdbid)
chain <- as.character(dataset$chain)
n.prot = length(pdbid.dataset)
theo.r.p.ref.fname <- file.path(out.dir, paste(mut.fname.id, "_out_r.p.ref.csv", sep = ""))
m.r.mut.fname <- file.path(out.dir, paste(mut.fname.id, "_out_m.r.mut.csv", sep = ""))
theo.r.p.ref = read.csv(theo.r.p.ref.fname)$x
theo.r.p.ref
length(theo.r.p.ref)/3
m.aligned.p.ref.index.fname
p.ref
# Description:
#
# This is the main program of the project. The program simulates multiple mutants of a given protein using the "Linearly Forced -
# Elastic Network Model" (LF-ENM) with different selection regimens according to the "Stress Model". The program also
# analyzes the multiple alignment of the family to which the protein belongs and calculates measures
# of variabilty of theoretical and experimental data.
#
# To run the program it is necessary to previously fill the input ("input_MainProgram.csv") with the following information:
#
#    - family: The family of the protein to mutate. It can be "globins", "serinProteases",
#    "snakesToxin", "sh3", "fabp", "rrm", "phoslip" or "cys".
#    - p.ref: The pdb code (pdbid) of the protein to mutate (example: "1a6m"). The protein must be a member of
#    the selected family. This pdbid must not be included in the dataset ("DATA/family_dataset.csv").
#    - chain.p.ref: The chain of p.ref in the pdb file obtained from Homstrad.
#    - n.mut.p: The number of mutants to generate for each member of the family. For example, if the family has 20
#    members, the program generates n.mut.p x 20 mutants.
#    - fmax: Argument for "LFENM". It is the maximun value for the forces that model the mutations.
#    - R0: the Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins.
#    - rotate: It can be "TRUE" or "FALSE". If it is "TRUE", r.p.2 is rotated in order to minimize RMSD with r.p.ref.
#    - heme: Argument for "globins". It can be "TRUE" or "FALSE". If it is "TRUE", the program considers the heme group.
#    - calculate.betas: It can be "TRUE" or "FALSE". If it is "TRUE", the program calculates betas of the "Stress Model".
#    - analyze.family: It can be "TRUE" or "FALSE". If it is "TRUE", the program analyzes the family.
#    - generate.mutants: It can be "TRUE" or "FALSE". If it is "TRUE", the program generates new mutants.
#    - K.analysis: It can be "K" or "Keff". For "K" or "Keff", the analysis is based on normal modes of "K" or "Keff"
#    respectibly.
# Remove objects from the workspace
rm(list = ls())
# Load packages
library(bio3d)
library(seqinr)
# Set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# Data dir
data.dir <- "DATA"
# Output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# General parameters
tolerance = 1e-10
# Function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# Source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# Read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# Start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# Analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# Generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# Calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# Read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# Start a loop for each beta
for (b in all.betas)  {
# Generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# Generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# Calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
warnings()
family
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
p.ref
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
all.betas
b = 0
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
AnalyzeExperimentalTheoretical(family,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
input
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("report_structure_CA", family, "_", enm, "_R0_", R0, ".html", sep = ''))
library(knitr)
install.packages("knitr")
library(knitr)
library(markdown)
out.dir <- "OUT/out_subset_CA_ANM"
enm = "ANM"
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
# satart a loop for each family
for (f in (1:nrow(input))) {
print(f)
family <- as.character(input$family)[f]
R0 = input$R0[f]
# generate reports
setwd("C:/Users/Usuario/Desktop/VariabilidadEstructuralProteica/OUT")
data.dir <- paste("out_subset_CA_ANM", sep = "")
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("report_structure_CA", family, "_", enm, "_R0_", R0, ".html", sep = ''))
}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = 2, autodep = T)
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
myColors = c("blue", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "strong", "mut+sel")
# significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
## Input and pre-processing of data
# Set up input filenames
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.csv", sep = ""))
dri2.exp.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.norm.dr.squarei.csv", sep = ""))
Pn.exp.fname = file.path(data.dir, paste(family,"_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.Pn.csv", sep = ""))
energy.exp.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.va.csv", sep = ""))
dri2.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
Pn.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.Pn.csv", sep = ""))
energy.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
dri2.mut.fname = file.path(data.dir,paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
Pn.mut.fname = file.path(data.dir, paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.Pn.csv", sep = ""))
energy.mut.fname = file.path(data.dir, paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
## which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
family
## Experimental protein names
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
protein.exp = protein.exp[protein.exp != reference]
print(protein.exp)
## read site information of reference protein
site.info = read.csv(site.info.fname, header = T, sep = ";")
## add info to site.info
d = ddply(site.info, "site", .fun = function(x) data.frame("da" = min(x[, c(-1, -2)])))
## Define shells of active site neighborhood (first shell is from 2.5 to 7.5, second from 7.5 to 12.5, etc)
d$shell = cut(d$da, breaks = c(-.1, 2.5, 7.5, 12.5, 17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5, max(d$da)))
levels(d$shell) = seq(length(levels(d$shell))) - 1 # rename shell levels
site.info = merge(site.info, d, by = "site")
## Read reference pdb and calculate resno, AA, and CN
reference.pdb.fname = file.path(data.dir,paste(reference, ".pdb", sep = ""))
ref.pdb = read.pdb(reference.pdb.fname)
inds = atom.select(ref.pdb, elety = "CA")
ref.pdb.ca = ref.pdb$atom[inds$atom,]
cmap.ca = cmap(ref.pdb$xyz[inds$xyz], dcut = R0, scut = 0, mask.lower = F)
CN = rowSums(cmap.ca, na.rm = T) - 1 # diag(cmap.ca) returned by cmap is 1!
AA = ref.pdb.ca$resid
resno = ref.pdb.ca$resno
pdb.info = data.frame(resno, AA, CN)
names(pdb.info) = c("resno", "AA", paste("CN", as.character(R0), sep = ""))
## Add pdb.info to site.info
site.info = cbind(site.info, pdb.info)
reference.pdb.fname
dri2.exp = read.csv(dri2.exp.fname, header = T)
site = site.info$site
dri2.exp = dri2.exp[, site]
rownames(dri2.exp) = protein.exp
Pn.exp = read.csv(Pn.exp.fname, header = T)
rownames(Pn.exp) = protein.exp
energy.exp = read.csv(energy.exp.fname, header = T)
rownames(energy.exp) = protein.exp
dri2.mut = read.csv(dri2.mut.fname, header = T)
site = site.info$site
dri2.mut = dri2.mut[, site]
rownames(dri2.mut) = paste("mut", rownames(dri2.mut), sep = "")
Pn.mut = read.csv(Pn.mut.fname, header = T)
rownames(Pn.mut) = paste("mut", rownames(Pn.mut), sep = "")
energy.mut = read.csv(energy.mut.fname, header = T)
rownames(energy.mut) = paste("mut", rownames(energy.mut), sep = "")
dri2.strong = read.csv(dri2.strong.fname, header = T)
site = site.info$site
dri2.strong = dri2.strong[, site]
rownames(dri2.strong) = paste("strong", rownames(dri2.strong), sep = "")
Pn.strong = read.csv(Pn.strong.fname, header = T)
rownames(Pn.strong) = paste("strong", rownames(Pn.strong), sep = "")
energy.strong = read.csv(energy.strong.fname, header = T)
rownames(energy.strong) = paste("strong", rownames(energy.strong), sep = "")
tdri2.strong = as.data.frame(t(as.matrix(dri2.strong)))
tdri2.strong = cbind(site.info, tdri2.strong)
siteComparison.strong = melt(tdri2.strong, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
tdri2.mut = as.data.frame(t(as.matrix(dri2.mut)))
tdri2.mut = cbind(site.info, tdri2.mut)
siteComparison.mut = melt(tdri2.mut, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
tdri2.exp = as.data.frame(t(as.matrix(dri2.exp)))
tdri2.exp = cbind(site.info, tdri2.exp)
siteComparison.exp = melt(tdri2.exp, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
siteComparison.all.datasets = rbind(
data.frame("dataset" = "exp", siteComparison.exp),
data.frame("dataset" = "mut", siteComparison.mut),
data.frame("dataset" = "strong", siteComparison.strong))
siteComparison.all.datasets = ddply(siteComparison.all.datasets, c("dataset", "protein"), mutate,
"n.SD" = dri2/mean(dri2, na.rm = T),
"z.SD" = vscale(dri2),
"RSD" = sqrt(dri2),
"n.RSD" = RSD/mean(RSD, na.rm = T),
"z.RSD" = vscale(RSD))
dat = siteComparison.all.datasets
dat$dataset = revalue(dat$dataset, c("strong" = "mut+sel"))
# dat.with.means and standard errors
d = ddply(dat,c("dataset","site","AA","shell"), function(x) {
mean.z.RSD = mean(x$z.RSD, na.rm = T)
ndata = sum(!is.na(x$z.RSD))
se.z.RSD = sd(x$z.RSD, na.rm = T) / sqrt(ndata)
data.frame(mean.z.RSD, ndata, se.z.RSD)
})
help(ddply)
help("ddply")
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
ddply
ddplay
library(plyr)
getwd()
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = 2, autodep = T)
install.packages("knitr")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = 2, autodep = T)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
library(reshape2)
library(plyr)
library(ggplot2)
Pn.exp.fname
dri2.exp
plot(colMeans(dri2.exp, na.rm = T))
points(colMeans(dri2.mut, na.rm = T), col = "red")
cor(colMeans(dri2.exp,na.rm=T), colMeans(dri2.mut, na.rm=T))
