reference.pdb.fname = file.path(data.dir,paste(reference, ".pdb", sep = ""))
ref.pdb = read.pdb(reference.pdb.fname)
inds = atom.select(ref.pdb, elety = "CA")
ref.pdb.ca = ref.pdb$atom[inds$atom,]
cmap.ca = cmap(ref.pdb$xyz[inds$xyz], dcut = R0, scut = 0, mask.lower = F)
CN = rowSums(cmap.ca, na.rm = T) - 1 # diag(cmap.ca) returned by cmap is 1!
AA = ref.pdb.ca$resid
resno = ref.pdb.ca$resno
pdb.info = data.frame(resno, AA, CN)
names(pdb.info) = c("resno", "AA", paste("CN", as.character(R0), sep = ""))
## Add pdb.info to site.info
site.info = cbind(site.info, pdb.info)
# Chunk 9: read_experimental_data
# Read experimental data
dri2.exp = read.csv(dri2.exp.fname, header = T)
site = site.info$site
dri2.exp = dri2.exp[, site]
rownames(dri2.exp) = protein.exp
Pn.exp = read.csv(Pn.exp.fname, header = T)
rownames(Pn.exp) = protein.exp
energy.exp = read.csv(energy.exp.fname, header = T)
rownames(energy.exp) = protein.exp
# Chunk 10: read_and_set_data_mut
# read simulated data
dri2.mut = read.csv(dri2.mut.fname, header = T)
site = site.info$site
dri2.mut = dri2.mut[, site]
rownames(dri2.mut) = paste("mut", rownames(dri2.mut), sep = "")
Pn.mut = read.csv(Pn.mut.fname, header = T)
rownames(Pn.mut) = paste("mut", rownames(Pn.mut), sep = "")
energy.mut = read.csv(energy.mut.fname, header = T)
rownames(energy.mut) = paste("mut", rownames(energy.mut), sep = "")
# Chunk 11: read_and_set_data_strong
# read simulated data
dri2.strong = read.csv(dri2.strong.fname, header = T)
site = site.info$site
dri2.strong = dri2.strong[, site]
rownames(dri2.strong) = paste("strong", rownames(dri2.strong), sep = "")
Pn.strong = read.csv(Pn.strong.fname, header = T)
rownames(Pn.strong) = paste("strong", rownames(Pn.strong), sep = "")
energy.strong = read.csv(energy.strong.fname, header = T)
rownames(energy.strong) = paste("strong", rownames(energy.strong), sep = "")
# Chunk 12: prepare-site-data
# Prepare my data.frame
# rows of dri2 are proteins, columns are sites
tdri2.strong = as.data.frame(t(as.matrix(dri2.strong)))
tdri2.strong = cbind(site.info, tdri2.strong)
siteComparison.strong = melt(tdri2.strong, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
tdri2.mut = as.data.frame(t(as.matrix(dri2.mut)))
tdri2.mut = cbind(site.info, tdri2.mut)
siteComparison.mut = melt(tdri2.mut, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
tdri2.exp = as.data.frame(t(as.matrix(dri2.exp)))
tdri2.exp = cbind(site.info, tdri2.exp)
siteComparison.exp = melt(tdri2.exp, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
siteComparison.all.datasets = rbind(
data.frame("dataset" = "exp", siteComparison.exp),
data.frame("dataset" = "mut", siteComparison.mut),
data.frame("dataset" = "strong", siteComparison.strong))
siteComparison.all.datasets = ddply(siteComparison.all.datasets, c("dataset", "protein"), mutate,
"n.SD" = dri2/mean(dri2, na.rm = T),
"z.SD" = vscale(dri2),
"RSD" = sqrt(dri2),
"n.RSD" = RSD/mean(RSD, na.rm = T),
"z.RSD" = vscale(RSD))
# Chunk 13: mean-z-RSD-vs-site
# Comparison of z.RSD profiles annotated with functional information (reported active sites).
dat = siteComparison.all.datasets
dat$dataset = revalue(dat$dataset, c("strong" = "mut+sel"))
# dat.with.means and standard errors
d = ddply(dat,c("dataset","site","AA","shell"), function(x) {
mean.z.RSD = mean(x$z.RSD, na.rm = T)
ndata = sum(!is.na(x$z.RSD))
se.z.RSD = sd(x$z.RSD, na.rm = T) / sqrt(ndata)
data.frame(mean.z.RSD, ndata, se.z.RSD)
})
##
z.RSD.exp = d$mean.z.RSD[d$dataset == "exp"]
z.RSD.strong = d$mean.z.RSD[d$dataset == "mut+sel"]
z.RSD.mut = d$mean.z.RSD[d$dataset == "mut"]
m.min.da.CM.ca = read.csv(file.path(data.dir, "min.da.CM.ca.csv", sep = ""))[, 2:4]
data.csv = data.frame(m.min.da.CM.ca[1:151, ], "mean.z.RSD.exp" = z.RSD.exp, "mean.z.RSD.strong" = z.RSD.strong, "mean.z.RSD.mut" = z.RSD.mut)
write.csv(data.csv, file.path(data.dir, "data.da.csv", sep = ""))
m.min.da.CM = m.min.da.CM.ca$min.da.CM[1:151]
data.plot = data.frame("d.exp.mut" = z.RSD.mut - z.RSD.exp, "d.exp.strong" = z.RSD.mut - z.RSD.strong, "m.min.da.CM" = m.min.da.CM)
r = round(cor(data.plot$d.exp.mut, data.plot$m.min.da.CM), 2)
ggplot(data.plot, aes(y = d.exp.mut, x = m.min.da.CM)) +
geom_point()+
geom_smooth(method = "lm") +
geom_label(aes(x = 5, y = 2, label = paste("R =", as.character(r)))) +
labs(y = "mean.z.RSD.mut - mean.z.RSD.exp", x = "min.da.CM")
r = round(cor(data.plot$d.exp.strong, data.plot$m.min.da.CM), 2)
ggplot(data.plot, aes(y = d.exp.strong, x = m.min.da.CM)) +
geom_point()+
geom_smooth(method = "lm") +
geom_label(aes(x = 5, y = 0.5, label = paste("R =", as.character(r)))) +
labs(y = "mean.z.RSD.strong - mean.z.RSD.exp", x = "min.da.CM")
##
m.min.da.ca = m.min.da.CM.ca$min.da.ca[1:151]
data.plot = data.frame("d.exp.mut" = z.RSD.mut - z.RSD.exp, "d.exp.strong" = z.RSD.strong - z.RSD.exp, "m.min.da.ca" = m.min.da.ca)
r = round(cor(data.plot$d.exp.mut, data.plot$m.min.da.ca), 2)
ggplot(data.plot, aes(y = d.exp.mut, x = m.min.da.ca)) +
geom_point()+
geom_smooth(method = "lm") +
geom_label(aes(x = 5, y = 2, label = paste("R =", as.character(r)))) +
labs(y = "mean.z.RSD.mut - mean.z.RSD.exp", x = "min.da.ca")
r = round(cor(data.plot$d.exp.strong, data.plot$m.min.da.ca), 2)
ggplot(data.plot, aes(y = d.exp.strong, x = m.min.da.ca)) +
geom_point()+
geom_smooth(method = "lm") +
geom_label(aes(x = 5, y = 2, label = paste("R =", as.character(r)))) +
labs(y = "mean.z.RSD.strong - mean.z.RSD.exp", x = "min.da.ca")
##
#d$dataset = factor(d$dataset, levels = c("exp", "mut", "strong"))
d$label = as.character(d$site)
active.sites = d$site[d$shell == 0]
p = ggplot(d,aes(x = site, y = mean.z.RSD, col = dataset, fill = dataset)) +
geom_line() +
geom_ribbon(aes(ymin = mean.z.RSD - f95 * se.z.RSD, ymax = mean.z.RSD + se.z.RSD), alpha = .4, show.legend = F) +
geom_vline(xintercept = active.sites, col = "grey", show.legend = F) +
labs(x = "site", y = "structural divergence(mean z.RSD)") +
coord_cartesian(ylim = c(-1.5, 2.8)) +
scale_colour_manual(name = NULL, values = myColors) +
scale_fill_manual(name=NULL, values = myColors)
# Plot separate and comparative plots
p.facet = p + facet_grid(dataset~., switch = "y") + theme(legend.position = "none")
p.facet %+% subset(d, dataset == "exp")
p.facet %+% subset(d, dataset == "mut")
p.facet %+% subset(d, dataset == "mut+sel")
p.facet
#p + theme(legend.position = "bottom", legend.title = element_blank())
p + theme(legend.position = "bottom")
# Chunk 14
dat = siteComparison.all.datasets
# dat.with.means and standard errors
dat = ddply(dat,c("dataset", "site", "AA", "shell"), function(x) {
mean.z.RSD = mean(x$z.RSD, na.rm = T)
ndata = sum(!is.na(x$z.RSD))
se.z.RSD = sd(x$z.RSD, na.rm = T) / sqrt(ndata)
data.frame(mean.z.RSD, ndata, se.z.RSD)
})
##
dat.exp = subset(dat, dataset == "exp")
dat.mut = subset(dat, dataset == "mut")
dat.strong = subset(dat, dataset == "strong")
ggplot(dat, aes(x = site, y = mean.z.RSD, col = dataset)) + geom_line() +
geom_text(data = subset(dat, dataset == "exp" & mean.z.RSD < -.5), aes(x = site, y = mean.z.RSD, label = site), nudge_y = -.1, size = 2)
d = dat.exp
d$d.exp.mut = dat.exp$mean.z.RSD - dat.mut$mean.z.RSD
d$d.exp.strong = dat.exp$mean.z.RSD - dat.strong$mean.z.RSD
d$d.strong.mut = dat.strong$mean.z.RSD - dat.mut$mean.z.RSD
dd = melt(data = d[, c("site", "se.z.RSD", "d.exp.mut", "d.strong.mut")], c("site", "se.z.RSD"))
ggplot(dd, aes(x = site, y = value, col = variable)) +
geom_line()
r = round(cor(d$d.strong.mut, d$d.exp.mut), 2)
ggplot(d, aes(x = scale(d.strong.mut), y = scale(d.exp.mut))) +
geom_point(aes(col = shell == 0)) +
geom_smooth(method = "lm") +
geom_label(aes(x = 0, y = 3, label = paste("R =", as.character(r)))) +
labs(x = "predicted selection vs mutation (RSD change)",y="empirical vs mutation (RSD change)")
r.exp.mut = cor(dat.exp$mean.z.RSD, dat.mut$mean.z.RSD)
r.exp.strong = cor(dat.exp$mean.z.RSD, dat.strong$mean.z.RSD)
r.mut.strong = cor(dat.mut$mean.z.RSD, dat.strong$mean.z.RSD)
cor.df = data.frame("comparison" = c("exp vs mut", "exp vs strong", "mut vs strong"),
"R" = c(r.exp.mut, r.exp.strong, r.mut.strong))
knitr::kable(cor.df, digits = 2)
write.csv(dat, "structure-comparison-profiles.csv")
# Chunk 15: prepare-mode-data
mode = seq(ncol(Pn.strong))
# Prepare modeComparison.strong
tPn.strong = as.data.frame(t(as.matrix(Pn.strong)))
tPn.strong = cbind(data.frame("mode" = mode), tPn.strong)
Pn.strong.long = melt(tPn.strong, "mode", variable.name = "protein", value.name = "Pn")
tenergy.strong = as.data.frame(t(as.matrix(energy.strong)))
tenergy.strong = cbind(data.frame("mode" = mode), tenergy.strong)
energy.strong.long = melt(tenergy.strong, "mode", variable.name = "protein", value.name = "energy")
energy.strong.long$sn2 = 1/energy.strong.long$energy
modeComparison.strong = merge(energy.strong.long, Pn.strong.long, by = c("mode", "protein"))
modeComparison.strong = ddply(modeComparison.strong, "protein", mutate, "Pn" = Pn / mean(Pn, na.rm = T))
# Prepare modeComparison.mut
tPn.mut = as.data.frame(t(as.matrix(Pn.mut)))
tPn.mut = cbind(data.frame("mode" = mode), tPn.mut)
Pn.mut.long = melt(tPn.mut, "mode", variable.name = "protein", value.name = "Pn")
tenergy.mut = as.data.frame(t(as.matrix(energy.mut)))
tenergy.mut = cbind(data.frame("mode" = mode), tenergy.mut)
energy.mut.long = melt(tenergy.mut, "mode", variable.name = "protein", value.name = "energy")
energy.mut.long$sn2 = 1/energy.mut.long$energy
modeComparison.mut = merge(energy.mut.long, Pn.mut.long, by = c("mode", "protein"))
modeComparison.mut = ddply(modeComparison.mut, "protein", mutate, "Pn" = Pn / mean(Pn, na.rm = T))
# Prepare modeComparison.exp
tPn.exp = as.data.frame(t(as.matrix(Pn.exp)))
tPn.exp = cbind(data.frame("mode" = mode), tPn.exp)
Pn.exp.long = melt(tPn.exp, "mode", variable.name = "protein", value.name = "Pn")
tenergy.exp = as.data.frame(t(as.matrix(energy.exp)))
tenergy.exp = cbind(data.frame("mode" = mode), tenergy.exp)
energy.exp.long = melt(tenergy.exp, "mode", variable.name = "protein", value.name = "energy")
energy.exp.long$sn2 = 1/energy.exp.long$energy
modeComparison.exp = merge(energy.exp.long,Pn.exp.long,by=c("mode", "protein"))
# renormalize Pn
modeComparison.exp = ddply(modeComparison.exp, "protein", mutate, "Pn" = Pn / mean(Pn, na.rm = T))
# modeComparison.exp has NA's because for proteins with gaps when using Keff there're less modes
#print("Warning: modeComparison.exp <- na.omit(modeComparison.exp)")
modeComparison.exp <- na.omit(modeComparison.exp)
modeComparison.strong <- na.omit(modeComparison.strong)
modeComparison.mut <- na.omit(modeComparison.mut)
# Chunk 16
## Quantile regression
# fit median and quantiles to simulated data and add them to data.frames
fit.strong.rq.5 <- rq(Pn ~ sn2, tau = .5, data = modeComparison.strong, method = "fn")
fit.strong.rq.05 <- rq(Pn ~ sn2, tau = .05, data = modeComparison.strong, method = "fn")
fit.strong.rq.95 <- rq(Pn ~ sn2, tau = .95, data = modeComparison.strong, method = "fn")
modeComparison.strong$rq.5 = fit.strong.rq.5$fitted.values
modeComparison.strong$rq.05 = fit.strong.rq.05$fitted.values
modeComparison.strong$rq.95 = fit.strong.rq.95$fitted.values
# fit median and quantiles to simulated data and add them to data.frames
fit.mut.rq.5 <- rq(Pn ~ sn2, tau = .5, data = modeComparison.mut, method = "fn")
fit.mut.rq.05 <- rq(Pn ~ sn2, tau = .05, data = modeComparison.mut, method = "fn")
fit.mut.rq.95 <- rq(Pn ~ sn2, tau = .95, data = modeComparison.mut, method = "fn")
modeComparison.mut$rq.5 = fit.mut.rq.5$fitted.values
modeComparison.mut$rq.05 = fit.mut.rq.05$fitted.values
modeComparison.mut$rq.95 = fit.mut.rq.95$fitted.values
# fit median and quantiles to experimental data
fit.exp.rq.5 <- rq(Pn ~ sn2, tau = .5, data = modeComparison.exp, method = "fn")
fit.exp.rq.05 <- rq(Pn ~ sn2, tau = .05, data = modeComparison.exp, method = "fn")
fit.exp.rq.95 <- rq(Pn ~ sn2, tau = .95, data = modeComparison.exp, method = "fn")
modeComparison.exp$rq.5 = fit.exp.rq.5$fitted.values
modeComparison.exp$rq.05 = fit.exp.rq.05$fitted.values
modeComparison.exp$rq.95 = fit.exp.rq.95$fitted.values
# put simulated and experimental data together
modeComparison.all.datasets = rbind(data.frame("dataset" = "exp", modeComparison.exp),
data.frame("dataset" = "mut", modeComparison.mut),
data.frame("dataset" = "strong", modeComparison.strong))
modeComparison.all.datasets$dataset = factor(modeComparison.all.datasets$dataset, levels = c("exp", "mut", "strong"))
# Chunk 17: Pn-vs-mode-energy
# Plot Pn vs energy
dat = modeComparison.all.datasets
dat$dataset = revalue(dat$dataset,c("strong" = "mut+sel"))
# p is just the median and quantiles
p.points.rq = ggplot(dat, aes(x = energy, y = Pn, col = dataset)) +
geom_point(alpha = .4, size = .2) +
geom_line(aes(y = rq.5)) +
geom_line(aes(y = rq.05)) +
geom_line(aes(y = rq.95))
p = p.points.rq +
labs(x = "mode energy", y = "structural divergence") +
coord_cartesian(xlim = c(0,2.5)) +
scale_colour_manual(name = NULL, values = myColors) +
scale_fill_manual(name=NULL, values = myColors)
p.facet = p + facet_grid(dataset~., switch = "y") + theme(legend.position = "none")
p.facet %+% subset(dat, dataset == "exp")
p.facet %+% subset(dat, dataset == "mut")
p.facet %+% subset(dat, dataset == "mut+sel")
p.facet
# Description:
#
# This is the main program of the project. The program simulates multiple mutants of a given protein using the "Linearly Forced -
# Elastic Network Model" (LF-ENM) with different selection regimens according to the "Stress Model". The program also
# analyzes the multiple alignment of the family to which the protein belongs and calculates measures
# of variabilty of theoretical and experimental data.
#
# To run the program it is necessary to previously fill the input ("input_MainProgram.csv") with the following information:
#
#    - family: The family of the protein to mutate. It can be "globins", "serinProteases",
#    "snakesToxin", "sh3", "fabp", "rrm", "phoslip" or "cys".
#    - p.ref: The pdb code (pdbid) of the protein to mutate (example: "1a6m"). The protein must be a member of
#    the selected family. This pdbid must not be included in the dataset ("DATA/family_dataset.csv").
#    - chain.p.ref: The chain of p.ref in the pdb file obtained from Homstrad.
#    - n.mut.p: The number of mutants to generate for each member of the family. For example, if the family has 20
#    members, the program generates n.mut.p x 20 mutants.
#    - fmax: Argument for "LFENM". It is the maximun value for the forces that model the mutations.
#    - R0: the Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins.
#    - rotate: It can be "TRUE" or "FALSE". If it is "TRUE", r.p.2 is rotated in order to minimize RMSD with r.p.ref.
#    - heme: Argument for "globins". It can be "TRUE" or "FALSE". If it is "TRUE", the program considers the heme group.
#    - calculate.betas: It can be "TRUE" or "FALSE". If it is "TRUE", the program calculates betas of the "Stress Model".
#    - analyze.family: It can be "TRUE" or "FALSE". If it is "TRUE", the program analyzes the family.
#    - generate.mutants: It can be "TRUE" or "FALSE". If it is "TRUE", the program generates new mutants.
#    - K.analysis: It can be "K" or "Keff". For "K" or "Keff", the analysis is based on normal modes of "K" or "Keff"
#    respectibly.
# Remove objects from the workspace
rm(list = ls())
# Load packages
library(bio3d)
library(seqinr)
# Set Elastic Network Model: "ANM" or "pfANM"
model <- "pfANM"
# Data dir
data.dir <- "DATA"
# Output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# General parameters
tolerance = 1e-10
# Function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# Source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# Read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# Start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# Analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# Generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# Calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# Read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# Start a loop for each beta
for (b in all.betas)  {
# Generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# Generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# Calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
468
468/3
921/3
921/3-156
468/3
setwd("C:/Users/Usuario/Desktop/VariabilidadEstructuralProteica/OUT")
source("out_subset_CA_pfANM/multiplot.R")
source("out_subset_CA_pfANM/my-functions.R")
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
setwd("C:/Users/Usuario/Desktop/VariabilidadEstructuralProteica/OUT")
source("out_subset_CA_ANM/multiplot.R")
source("out_subset_CA_ANM/my-functions.R")
myColors = c("blue", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "strong", "mut+sel")
# Set options
family = "globins"
R0 = 10
enm = "ANM"
# significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
data.dir = paste("out_subset_CA_ANM", sep = "")
## Input and pre-processing of data
# Set up input filenames
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(family, "_out_m.da.csv", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
dri2.exp.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.norm.dr.squarei.csv", sep = ""))
Pn.exp.fname = file.path(data.dir, paste(family,"_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.Pn.csv", sep = ""))
energy.exp.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.exp.va.csv", sep = ""))
dri2.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
Pn.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.Pn.csv", sep = ""))
energy.strong.fname = file.path(data.dir, paste(family, "_R0_10_beta_strong.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
dri2.mut.fname = file.path(data.dir,paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
Pn.mut.fname = file.path(data.dir, paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.Pn.csv", sep = ""))
energy.mut.fname = file.path(data.dir, paste(family, "_R0_10_beta_no.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
## which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
## Experimental protein names
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
protein.exp = protein.exp[protein.exp != reference]
print(protein.exp)
## read site information of reference protein
site.info = read.csv(site.info.fname, header = T, sep = ";")
## add info to site.info
d = ddply(site.info, "site", .fun = function(x) data.frame("da" = min(x[, c(-1, -2)])))
## Define shells of active site neighborhood (first shell is from 2.5 to 7.5, second from 7.5 to 12.5, etc)
d$shell = cut(d$da, breaks = c(-.1, 2.5, 7.5, 12.5, 17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5, max(d$da)))
levels(d$shell) = seq(length(levels(d$shell))) - 1 # rename shell levels
site.info = merge(site.info, d, by = "site")
## Read reference pdb and calculate resno, AA, and CN
reference.pdb.fname = file.path(data.dir,paste(reference, ".pdb", sep = ""))
ref.pdb = read.pdb(reference.pdb.fname)
inds = atom.select(ref.pdb, elety = "CA")
ref.pdb.ca = ref.pdb$atom[inds$atom,]
cmap.ca = cmap(ref.pdb$xyz[inds$xyz], dcut = R0, scut = 0, mask.lower = F)
CN = rowSums(cmap.ca, na.rm = T) - 1 # diag(cmap.ca) returned by cmap is 1!
AA = ref.pdb.ca$resid
resno = ref.pdb.ca$resno
pdb.info = data.frame(resno, AA, CN)
names(pdb.info) = c("resno", "AA", paste("CN", as.character(R0), sep = ""))
## Add pdb.info to site.info
site.info = cbind(site.info, pdb.info)
# read experimental data
dri2.exp = read.csv(dri2.exp.fname, header = T)
site = site.info$site
dri2.exp = dri2.exp[, site]
rownames(dri2.exp) = protein.exp
Pn.exp = read.csv(Pn.exp.fname, header = T)
rownames(Pn.exp) = protein.exp
energy.exp = read.csv(energy.exp.fname, header = T)
rownames(energy.exp) = protein.exp
# read simulated data
dri2.mut = read.csv(dri2.mut.fname, header = T)
site = site.info$site
dri2.mut = dri2.mut[, site]
rownames(dri2.mut) = paste("mut", rownames(dri2.mut), sep = "")
Pn.mut = read.csv(Pn.mut.fname, header = T)
rownames(Pn.mut) = paste("mut", rownames(Pn.mut), sep = "")
energy.mut = read.csv(energy.mut.fname, header = T)
rownames(energy.mut) = paste("mut", rownames(energy.mut), sep = "")
# read simulated data
dri2.strong = read.csv(dri2.strong.fname, header = T)
site = site.info$site
dri2.strong = dri2.strong[, site]
rownames(dri2.strong) = paste("strong", rownames(dri2.strong), sep = "")
Pn.strong = read.csv(Pn.strong.fname, header = T)
rownames(Pn.strong) = paste("strong", rownames(Pn.strong), sep = "")
energy.strong = read.csv(energy.strong.fname, header = T)
rownames(energy.strong) = paste("strong", rownames(energy.strong), sep = "")
MSD.exp = mean(rowMeans(as.matrix(dri2.exp), na.rm = T), na.rm = T)
MSD.mut = mean(rowMeans(as.matrix(dri2.mut)))
MSD.strong = mean(rowMeans(as.matrix(dri2.strong)))
df.MSD = data.frame(MSD.exp = MSD.exp, MSD.mut = MSD.mut, MSD.strong = MSD.strong)
knitr::kable(df.MSD, digits = 2)
MSD.exp
MSD.mut
MSD.strong
MSD.exp = mean(rowMeans(as.matrix(dri2.exp), na.rm = T), na.rm = T)
MSD.mut = mean(rowMeans(as.matrix(dri2.mut)))
MSD.strong = mean(rowMeans(as.matrix(dri2.strong)))
df.MSD = data.frame(MSD.exp = MSD.exp, MSD.mut = MSD.mut, MSD.strong = MSD.strong)
knitr::kable(df.MSD, digits = 4)
