source(CalculateVariability.fname)
source(CalculateDynamicalVariability.fname)
source(CalculateDaCMCA.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core of the alignment
GetCore(family,
data.dir,
p.ref)
# calculate distances to the active site
CalculateDaCMCA(family,
p.ref,
chain.p.ref,
heme,
data.dir,
out.dir)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
}
p
P
f
family
# Description:
#
# This is the main program of the project. The program simulates multiple mutants of a given protein using the "Linearly Forced -
# Elastic Network Model" (LF-ENM) with different selection regimens according to the "Stress Model". The program also
# analyzes the multiple alignment of the family to which the protein belongs and calculates measures
# of variabilty of theoretical and experimental structures.
# Experimental structures and the multiple alignment must be obtained from Homstrad.
#
# To run the program it is necessary to previously fill the input ("input_MainProgram.csv") with the following information:
#
#    - family: The family of the protein to mutate.
#    - p.ref: The pdb code (pdbid) of the protein to mutate (example: "1a6m"). The protein must be a member of
#    the selected family. This pdbid must not be included in the dataset ("DATA/family_dataset.csv").
#    - chain.p.ref: The chain of p.ref in the pdb file obtained from Homstrad.
#    - n.mut.p: The number of mutants to generate for each member of the family. For example, if the family has 20
#    members, the program generates n.mut.p x 20 mutants.
#    - fmax: Argument for the "LF-ENM". It is the maximun value for the forces that model the mutations.
#    - R0.CA: The Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins for the CA model.
#    - R0.CM: The Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins for the two nodes per site model.
#    - rotate: It can be "TRUE" or "FALSE". If it is "TRUE", r.p.2 is rotated in order to minimize RMSD with r.p.ref.
#    - heme: Argument for "globins". It can be "TRUE" or "FALSE". If it is "TRUE", the program considers the heme group.
#    - calculate.betas: It can be "TRUE" or "FALSE". If it is "TRUE", the program calculates betas of the "Stress Model".
#    - analyze.family: It can be "TRUE" or "FALSE". If it is "TRUE", the program analyzes the family.
#    - generate.mutants: It can be "TRUE" or "FALSE". If it is "TRUE", the program generates new mutants.
#    - K.analysis: It can be "K" or "Keff". For "K" or "Keff", the analysis is based on normal modes of "K" or "Keff"
#    respectibly.
### PROGRAM ###
# remove objects from the workspace
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# data dir
data.dir <- "DATA"
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateSideChainCM.fname <- "FUNCTIONS/CalculateSideChainCM.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
CalculateDynamicalVariability.fname <- "FUNCTIONS/CalculateDynamicalVariability.R"
CalculateDaCMCA.fname <- "FUNCTIONS/CalculateDaCMCA.R"
GetCore.fname <- "FUNCTIONS/GetCore.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateSideChainCM.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateDynamicalVariability.fname)
source(CalculateDaCMCA.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core of the alignment
GetCore(family,
data.dir,
p.ref)
# calculate distances to the active site
CalculateDaCMCA(family,
p.ref,
chain.p.ref,
heme,
data.dir,
out.dir)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
}
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
P
# filenames
dataset.fname <- file.path(data.dir, paste(family, "_dataset.csv", sep = ""))
pdbs.fname <- file.path(data.dir, paste(family, "_coordinates.pdb", sep = ""))
m.n.aligned.fname <- file.path(out.dir, paste(family, "_out_m.n.aligned.csv", sep = ""))
m.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.ref.index.csv", sep = ""))
m.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.2.index.csv", sep = ""))
m.not.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.ref.index.csv", sep = ""))
m.not.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.2.index.csv", sep = ""))
# read the dataset
dataset <- read.csv(dataset.fname)
pdbid.dataset <- as.character(dataset$pdbid)
chain <- as.character(dataset$chain)
n.prot = length(pdbid.dataset)
### THEORETICAL ###
print("analysing theoretical...")
# filenames
theo.r.p.ref.fname <- file.path(out.dir, paste(mut.fname.id, "_out_r.p.ref.csv", sep = ""))
m.r.mut.fname <- file.path(out.dir, paste(mut.fname.id, "_out_m.r.mut.csv", sep = ""))
# read coordinates
theo.r.p.ref = read.csv(theo.r.p.ref.fname)$x
m.r.mut = read.csv(m.r.mut.fname)
n.sites.p.ref = length(theo.r.p.ref)/3
n.mut = ncol(m.r.mut)
# Read pdb of exp.p.ref
exp.r.p.ref = theo.r.p.ref
if(heme == "TRUE") {
n.aa.p.ref = n.sites.p.ref - 5
} else {
n.aa.p.ref = n.sites.p.ref
}
# Read indexes files
m.n.aligned = read.csv(m.n.aligned.fname)
m.aligned.p.ref.index = read.csv(m.aligned.p.ref.index.fname)
m.aligned.p.2.index = read.csv(m.aligned.p.2.index.fname)
m.not.aligned.p.ref.index = read.csv(m.not.aligned.p.ref.index.fname)
m.not.aligned.p.2.index = read.csv(m.not.aligned.p.2.index.fname)
# create matrices to save measures of variability of each mutant
m.exp.Pn = matrix(nrow = n.prot, ncol = 3 * (n.sites.p.ref))
m.exp.va = matrix(nrow = n.prot, ncol = 3 * (n.sites.p.ref))
m.exp.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
m.exp.dr.squarei.windows.rot = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.dr.squarei.windows.contacts.rot = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.norm.dr.squarei = matrix(nrow = n.prot, ncol = (n.sites.p.ref))
m.exp.norm.dr.squarei.windows.rot = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.norm.dr.squarei.windows.contacts.rot = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.local.score = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.square.dif.MSF = matrix(nrow = n.prot, ncol = n.sites.p.ref)
m.exp.nH = matrix(nrow = n.prot, ncol = 3 * n.sites.p.ref)
m.exp.nR = matrix(nrow = n.prot, ncol = 3 * n.sites.p.ref)
P=19
# Get aligned and not aligned indexes
n.aligned = as.numeric(m.n.aligned[P, ])
aligned.p.ref.index = as.numeric(m.aligned.p.ref.index[P, !is.na(m.aligned.p.ref.index[P, ])])
aligned.p.2.index = as.numeric(m.aligned.p.2.index[P, !is.na(m.aligned.p.2.index[P, ])])
not.aligned.p.ref.index = as.numeric(m.not.aligned.p.ref.index[P, !is.na(m.not.aligned.p.ref.index[P, ])])
not.aligned.p.2.index = as.numeric(m.not.aligned.p.2.index[P, !is.na(m.not.aligned.p.2.index[P, ])])
# Read PDB of exp.p.2
chain.p.2 <- chain[[P]]
exp.pdb.p.2 = ReadCA(pdbs.fname, chain.p.2)
exp.r.p.2 = exp.pdb.p.2$xyz.calpha
exp.n.aa.p.2 = exp.pdb.p.2$n.sites
exp.n.aa.p.2
exp.pdb.p.2
chain.p.2
chain
dataset$chain
data()
dataset
dataset
f
family
family
f
f = 8
f = 8
f
f
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
family
print(family)
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
all.betas
b=0
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# filenames
dataset.fname <- file.path(data.dir, paste(family, "_dataset.csv", sep = ""))
pdbs.fname <- file.path(data.dir, paste(family, "_coordinates.pdb", sep = ""))
m.n.aligned.fname <- file.path(out.dir, paste(family, "_out_m.n.aligned.csv", sep = ""))
m.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.ref.index.csv", sep = ""))
m.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.aligned.p.2.index.csv", sep = ""))
m.not.aligned.p.ref.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.ref.index.csv", sep = ""))
m.not.aligned.p.2.index.fname <- file.path(out.dir, paste(family, "_out_m.not.aligned.p.2.index.csv", sep = ""))
# read the dataset
dataset <- read.csv(dataset.fname)
pdbid.dataset <- as.character(dataset$pdbid)
chain <- as.character(dataset$chain)
n.prot = length(pdbid.dataset)
### THEORETICAL ###
print("analysing theoretical...")
# filenames
theo.r.p.ref.fname <- file.path(out.dir, paste(mut.fname.id, "_out_r.p.ref.csv", sep = ""))
m.r.mut.fname <- file.path(out.dir, paste(mut.fname.id, "_out_m.r.mut.csv", sep = ""))
# read coordinates
theo.r.p.ref = read.csv(theo.r.p.ref.fname)$x
m.r.mut = read.csv(m.r.mut.fname)
n.sites.p.ref = length(theo.r.p.ref)/3
n.mut = ncol(m.r.mut)
# Read pdb of exp.p.ref
exp.r.p.ref = theo.r.p.ref
if(heme == "TRUE") {
n.aa.p.ref = n.sites.p.ref - 5
} else {
n.aa.p.ref = n.sites.p.ref
}
# Read indexes files
m.n.aligned = read.csv(m.n.aligned.fname)
m.aligned.p.ref.index = read.csv(m.aligned.p.ref.index.fname)
m.aligned.p.2.index = read.csv(m.aligned.p.2.index.fname)
m.not.aligned.p.ref.index = read.csv(m.not.aligned.p.ref.index.fname)
m.not.aligned.p.2.index = read.csv(m.not.aligned.p.2.index.fname)
P
# Get aligned and not aligned indexes
n.aligned = as.numeric(m.n.aligned[P, ])
aligned.p.ref.index = as.numeric(m.aligned.p.ref.index[P, !is.na(m.aligned.p.ref.index[P, ])])
aligned.p.2.index = as.numeric(m.aligned.p.2.index[P, !is.na(m.aligned.p.2.index[P, ])])
not.aligned.p.ref.index = as.numeric(m.not.aligned.p.ref.index[P, !is.na(m.not.aligned.p.ref.index[P, ])])
not.aligned.p.2.index = as.numeric(m.not.aligned.p.2.index[P, !is.na(m.not.aligned.p.2.index[P, ])])
# Read PDB of exp.p.2
chain.p.2 <- chain[[P]]
exp.pdb.p.2 = ReadCA(pdbs.fname, chain.p.2)
exp.r.p.2 = exp.pdb.p.2$xyz.calpha
exp.n.aa.p.2 = exp.pdb.p.2$n.sites
# Calculate heme coordinates, add them to CA´s coordinates and calculate the number of sites and not aligned indexes
if (heme == "TRUE") {
exp.r.heme.p.2 = ReadHeme(pdbs.fname, chain.p.2)
exp.r.p.2 = cbind(exp.r.p.2, exp.r.heme.p.2)
exp.n.sites.p.2 = ncol(exp.r.p.2)
aligned.p.ref.index <- c(aligned.p.ref.index, t(seq((n.aa.p.ref + 1), n.sites.p.ref)))
aligned.p.2.index <- c(aligned.p.2.index, t(seq((exp.n.aa.p.2 + 1), exp.n.sites.p.2)))
}
aligned.p.2.index
exp.variability = CalculateVariability(as.vector(exp.r.p.ref),
as.vector(exp.r.p.2),
n.sites.p.ref,
exp.n.sites.p.2,
aligned.p.ref.index,
aligned.p.2.index,
not.aligned.p.ref.index,
not.aligned.p.2.index,
R0,
rotate,
K.analysis,
tolerance)
m.exp.va[P, 1:length(exp.variability$va)] = exp.variability$va
m.exp.Pn[P, 1:length(exp.variability$Pn)] = exp.variability$Pn
m.exp.local.score[P, 1:length(exp.variability$local.score)] = exp.variability$local.score
m.exp.nH[P, 1:length(exp.variability$nH)] = exp.variability$nH
m.exp.nR[P, 1:length(exp.variability$nR)] = exp.variability$nR
exp.variability$va
exp.variability$Pn
