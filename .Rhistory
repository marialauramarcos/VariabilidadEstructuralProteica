theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
MSE.nsT.cF = mean((MSDi.fit.nsT.cF - cF.exp.smooth.MSDi[!is.na(cF.exp.smooth.MSDi)]) ^ 2)
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.smooth.MSDi ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.smooth.MSDi ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
MSE.nsT.cF = mean((MSDi.fit.nsT.cF - cF.exp.smooth.MSDi[!is.na(cF.exp.smooth.MSDi)]) ^ 2)
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.smooth.MSDi ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.smooth.MSDi ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
a
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.smooth.MSDi ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.smooth.MSDi ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
exp.MSDi.s
exp.MSDi
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.smooth.MSDi ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.smooth.MSDi ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.MSDi.s ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.MSDi.s ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsF.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsF.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi[!is.na(exp.MSDi)]) ^ 2
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi[!is.na(exp.MSDi.s)]) ^ 2
R2.nsF.cF
R2.nsT.cF
R2.nsF.cF.s
R2.nsT.cF.s
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi)
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi)
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s) ^ 2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s) ^ 2
R2.nsF.cF
R2.nsT.cF
R2.nsF.cF.s
R2.nsT.cF.s
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.MSDi.s ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.MSDi.s ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsT.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsT.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi)
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi)
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)
R2.nsF.cF
R2.nsT.cF
R2.nsF.cF.s
R2.nsT.cF.s
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi)^2
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi)^2
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)^2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)^2
R2.nsF.cF
R2.nsT.cF
R2.nsF.cF.s
R2.nsT.cF.s
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
theo.MSDi.nsF = c()
theo.MSDi.nsT = c()
theo.MSDi.nsF.s = c()
theo.MSDi.nsT.s = c()
exp.MSDi = c()
exp.MSDi.s = c()
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
#EXP.
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "FALSE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.cF.exp.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.dr.squarei.csv", sep = "")))
m.cF.exp.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.exp.smooth.dr.squarei.csv", sep = "")))
cF.exp.MSDi = colMeans(m.cF.exp.dr.squarei, na.rm = T )
cF.exp.MSDi.s = colMeans(m.cF.exp.smooth.dr.squarei, na.rm = T )
#THEO#
m.nsF.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsF.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsF.cF.theo.MSDi = colMeans(m.nsF.cF.theo.dr.squarei, na.rm = T)
nsF.cF.theo.smooth.MSDi = colMeans(m.nsF.cF.theo.smooth.dr.squarei, na.rm = T)
analysis.fname.id <- paste(family, "_mut.model_", mut.model, "_naturalSelection_", "TRUE", "_R0_", R0, "_core_", "FALSE", "_K.analysis_", K.analysis, sep = "")
m.nsT.cF.theo.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.dr.squarei.csv", sep = "")))
m.nsT.cF.theo.smooth.dr.squarei = read.csv(file.path(out.dir, paste(analysis.fname.id, "_out_m.theo.smooth.dr.squarei.csv", sep = "")))
nsT.cF.theo.MSDi = colMeans(m.nsT.cF.theo.dr.squarei, na.rm = T)
nsT.cF.theo.smooth.MSDi = colMeans(m.nsT.cF.theo.smooth.dr.squarei, na.rm = T)
##
fit.nsF.cF = lm(cF.exp.MSDi ~ nsF.cF.theo.MSDi)
MSDi.fit.nsF.cF = fitted.values(fit.nsF.cF)
fit.nsT.cF = lm(cF.exp.MSDi ~ nsT.cF.theo.MSDi)
MSDi.fit.nsT.cF = fitted.values(fit.nsT.cF)
fit.nsF.cF.s = lm(cF.exp.MSDi.s ~ nsF.cF.theo.smooth.MSDi)
MSDi.fit.nsF.cF.s = fitted.values(fit.nsF.cF.s)
fit.nsT.cF.s = lm(cF.exp.MSDi.s ~ nsT.cF.theo.smooth.MSDi)
MSDi.fit.nsT.cF.s = fitted.values(fit.nsT.cF.s)
theo.MSDi.nsF = c(theo.MSDi.nsF, MSDi.fit.nsF.cF)
theo.MSDi.nsT = c(theo.MSDi.nsT, MSDi.fit.nsT.cF)
theo.MSDi.nsF.s = c(theo.MSDi.nsF.s, MSDi.fit.nsF.cF.s)
theo.MSDi.nsT.s = c(theo.MSDi.nsT.s, MSDi.fit.nsT.cF.s)
cF.exp.MSDi = cF.exp.MSDi[!is.na(cF.exp.MSDi)]
cF.exp.MSDi.s = cF.exp.MSDi.s[!is.na(cF.exp.MSDi.s)]
exp.MSDi = c(exp.MSDi, cF.exp.MSDi)
exp.MSDi.s = c(exp.MSDi.s, cF.exp.MSDi.s)
}
R2.nsF.cF = cor(theo.MSDi.nsF, exp.MSDi)^2
R2.nsT.cF = cor(theo.MSDi.nsT, exp.MSDi)^2
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)^2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)^2
R2.nsF.cF
R2.nsT.cF
R2.nsF.cF.s
R2.nsT.cF.s
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)
R2.nsF.cF.s
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)
R2.nsT.cF.s
plot(theo.MSDi.nsF, exp.MSDi)
plot(theo.MSDi.nsF)
points(exp.MSDi, col = "red")
plot(theo.MSDi.nsF, type="l")
points(exp.MSDi, col = "red", type="l")
layout(matrix(1:1, 1, 1, byrow = F))
plot(theo.MSDi.nsF, type="l")
points(exp.MSDi, col = "red", type="l")
plot(theo.MSDi.nsT, type = "l")
points(exp.MSDi, col = "red", type = "l")
plot(theo.MSDi.nsF.s, type="l")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsF.cF.s, digits = 2)), bty = "n", text.col = "red")
R2.nsF.cF.s = cor(theo.MSDi.nsF.s, exp.MSDi.s)^2
R2.nsT.cF.s = cor(theo.MSDi.nsT.s, exp.MSDi.s)^2
plot(theo.MSDi.nsF.s, type="l")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsF.cF.s, digits = 2)), bty = "n", text.col = "red")
layout(matrix(1:3, 3, 1, byrow = F))
plot(theo.MSDi.nsF.s, type="l")
plot(exp.MSDi.s, type="l", col ="red")
plot(theo.MSDi.nsF.s, type="l")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsF.cF.s, digits = 2)), bty = "n", text.col = "red")
plot(theo.MSDi.nsT.s, type="l")
plot(exp.MSDi.s, type="l", col ="red")
plot(theo.MSDi.nsT.s, type="l")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsT.cF.s, digits = 2)), bty = "n", text.col = "red")
cor(theo.MSDi.nsF.s, exp.MSDi.s)
cor(theo.MSDi.nsF.s, exp.MSDi.s, method="sperarman")
cor(theo.MSDi.nsF.s, exp.MSDi.s, method="spearman")
plot(theo.MSDi.nsF, type="l")
plot(exp.MSDi, type="l", col ="red")
plot(theo.MSDi.nsF, type="l")
points(exp.MSDi, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsF.cF, digits = 2)), bty = "n", text.col = "red")
layout(matrix(1:3, 3, 1, byrow = F))
plot(theo.MSDi.nsT, type="l")
plot(exp.MSDi, type="l", col ="red")
plot(theo.MSDi.nsT, type="l")
points(exp.MSDi, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsT.cF, digits = 2)), bty = "n", text.col = "red")
source('~/.active-rstudio-document', echo=TRUE)
layout(matrix(1:3, 3, 1, byrow = F))
plot(theo.MSDi.nsT.s, type="l", xlab = "sitio")
plot(exp.MSDi.s, type="l", col ="red")
plot(theo.MSDi.nsT.s, type="l")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsT.cF.s, digits = 2)), bty = "n", text.col = "red")
# Load packages.
library(knitr)
library(markdown)
# Read input.
input.fname <- file.path("input_MainMultipleReport.csv")
input <- read.csv(input.fname)
for (a in (1:nrow(input))) {
print(a)
family <- as.character(input$family)[a]
p.ref <- as.character(input$p.ref)[a]
mut.model = input$mut.model[a]
n.mut.p = input$n.mut.p[a]
R0 = input$R0[a]
K.analysis = input$K.analysis[a]
# Generate a report.
rmarkdown::render('MultipleReport.Rmd',
output_file =  paste("report_", family, "_R0_", R0, "_K.analysis_", K.analysis, ".html", sep = ''))
}
legend("topleft", paste("R^2", round(R2.nsF.cF.s, digits = 2), " ", "MSE", signif(MSE.nsF.cF.s, digits = 2)), bty = "n", text.col = "red")
MSE.nsF.cF = mean((theo.MSDi.nsF - exp.MSDi) ^ 2)
MSE.nsT.cF = mean((theo.MSDi.nsT - exp.MSDi) ^ 2)
MSE.nsF.cF.s = mean((theo.MSDi.nsF.s - exp.MSDi.s) ^ 2)
MSE.nsT.cF.s = mean((theo.MSDi.nsT.s - exp.MSDi.s) ^ 2)
MSE.nsF.cF
MSE.nsT.cF
MSE.nsF.cF.s
MSE.nsT.cF.s
legend("topleft", paste("R^2", round(R2.nsT.cF, digits = 2)), bty = "n", text.col = "red")
plot(theo.MSDi.nsF.s, type="l", xlab = "sitio", ylab = "Theoretical ns = F")
plot(exp.MSDi.s, type="l", col ="red", ylab = "Experimental")
plot(theo.MSDi.nsF.s, type="l", ylab = "both")
points(exp.MSDi.s, col = "red", type="l")
legend("topleft", paste("R^2", round(R2.nsF.cF.s, digits = 2), " ", "MSE", signif(MSE.nsF.cF.s, digits = 2)), bty = "n", text.col = "red")
