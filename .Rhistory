# source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateSideChainCM.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateDynamicalVariability.fname)
source(CalculateDaCMCA.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core of the alignment
GetCore(family,
data.dir,
p.ref)
# calculate distances to the active site
CalculateDaCMCA(family,
p.ref,
chain.p.ref,
heme,
data.dir,
out.dir)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
}
# load packages
library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
f = 1
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
# set chunk options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
# load functions
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
# set my colors
myColors = c("blue", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "medium", "mut+sel")
# set significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
# set input filenames
## data
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.ca.csv", sep = ""))
min.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_min.da.CM.ca.csv", sep = ""))
## profiles to compare
### nH
nH.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.nH.csv", sep = ""))
nH.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.nH.csv", sep = ""))
nH.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.nH.csv", sep = ""))
### energy
energy.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.va.csv", sep = ""))
energy.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
energy.mut.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.va.csv", sep = ""))
# which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
if (reference != p.ref) {
print("Warning: different references")
}
# experimental protein names
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
protein.exp = protein.exp[protein.exp != reference]
print(protein.exp)
# prepare the data
nH.exp = read.csv(nH.exp.fname, header = T)
rownames(nH.exp) = protein.exp
mode = seq(ncol(nH.medium))
nH.medium
nH.medium = read.csv(nH.medium.fname, header = T)
# prepare the data
nH.exp = read.csv(nH.exp.fname, header = T)
rownames(nH.exp) = protein.exp
protein.exp
nH.exp
nH.exp = read.csv(nH.exp.fname, header = T)
nH.exp
dim(nH.exp)
family
nH.exp[1,]
nH.exp[37,]
nH.exp[40,]
nH.exp[50,]
nH.exp[1,]
nH.exp[1,1:10]
nH.exp[40,1:10]
nH.exp[41,1:10]
nH.exp
colMeans(nH.exp, na.rm = T)
plot(colMeans(nH.exp, na.rm = T))
nH.mut = read.csv(nH.mut.fname, header = T)
points(colMeans(nH.mut, na.rm = T), col = "red")
plot(colMeans(nH.exp, na.rm = T))
points(colMeans(nH.mut, na.rm = T), col = "red")
nH.medium = read.csv(nH.medium.fname, header = T)
points(colMeans(nH.medium, na.rm = T), col = "blue")
plot(colMeans(nH.exp, na.rm = T))
points(colMeans(nH.medium, na.rm = T), col = "blue")
plot(scale(colMeans(nH.exp, na.rm = T)))
points(scale(colMeans(nH.medium, na.rm = T)), col = "blue")
cor(scale(colMeans(nH.exp, na.rm = T)), scale(colMeans(nH.medium, na.rm = T)))
cor((colMeans(nH.exp, na.rm = T)), (colMeans(nH.medium, na.rm = T)))
cor((colMeans(nH.exp, na.rm = T))[1:100], (colMeans(nH.medium, na.rm = T))[1:100])
square.dif.MSF.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.square.dif.MSF.csv", sep = ""))
square.dif.MSF.medium.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_medium.sel_K.analysis_Keff_out_m.theo.square.dif.MSF.csv", sep = ""))
square.dif.MSF.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.square.dif.MSF.csv", sep = ""))
square.dif.MSF.exp = read.csv(square.dif.MSF.exp.fname, header = T)
rownames(square.dif.MSF.exp) = protein.exp
energy.exp = read.csv(energy.exp.fname, header = T)
rownames(energy.exp) = protein.exp
square.dif.MSF.mut = read.csv(square.dif.MSF.mut.fname, header = T)
rownames(square.dif.MSF.mut) = paste("mut", rownames(square.dif.MSF.mut), sep = "")
energy.mut = read.csv(energy.mut.fname, header = T)
rownames(energy.mut) = paste("mut", rownames(energy.mut), sep = "")
square.dif.MSF.medium = read.csv(square.dif.MSF.medium.fname, header = T)
rownames(square.dif.MSF.medium) = paste("medium", rownames(square.dif.MSF.medium), sep = "")
energy.medium = read.csv(energy.medium.fname, header = T)
rownames(energy.medium) = paste("medium", rownames(energy.medium), sep = "")
square.dif.MSF.exp
square.dif.MSF.exp
colMeans(square.dif.MSF.exp)
colMeans(square.dif.MSF.exp, na.rm = T)
plot(colMeans(square.dif.MSF.exp, na.rm = T))
plot(colMeans(square.dif.MSF.exp[1:40,], na.rm = T))
plot(scale(colMeans(square.dif.MSF.exp[1:40,], na.rm = T)))
plot(scale(colMeans(square.dif.MSF.medium[1:40,], na.rm = T)))
plot(scale(colMeans(square.dif.MSF.exp[1:40,], na.rm = T)))
plot(scale(colMeans(square.dif.MSF.exp[2:40,], na.rm = T)))
plot(scale(colMeans(square.dif.MSF.exp[,2:40,], na.rm = T)))
points(scale(colMeans(square.dif.MSF.medium[,2:40,], na.rm = T)), col = "red")
plot(scale(colMeans(square.dif.MSF.medium[,2:40,], na.rm = T)), col = "red")
plot(scale((square.dif.MSF.medium[1,2:40,], na.rm = T)), col = "red")
plot(scale((square.dif.MSF.medium[1,2:40,])), col = "red")
plot(scale(square.dif.MSF.medium[1,2:40,]), col = "red")
plot(scale(square.dif.MSF.medium[2:40,]), col = "red")
(scale(square.dif.MSF.medium[2:40,]))
as.numeric(scale(square.dif.MSF.medium[2:40,]))
plot(as.numeric(scale(square.dif.MSF.medium[2:40,])))
plot(as.numeric(scale(square.dif.MSF.medium[1,2:40,])))
(as.numeric(scale(square.dif.MSF.medium[1,2:40,])))
(as.numeric(scale(square.dif.MSF.medium[2,2:40,])))
(as.numeric(scale(square.dif.MSF.medium[3,2:40,])))
(as.numeric(scale(square.dif.MSF.medium[4,2:40,])))
(as.numeric(scale(square.dif.MSF.medium[4,1:40,])))
(square.dif.MSF.medium[4,1:40,])
plot(square.dif.MSF.medium[4,1:40,])
plot(as.numeric(square.dif.MSF.medium[4,1:40,]))
plot(as.numeric(square.dif.MSF.medium[1,1:40,]))
plot(as.numeric(square.dif.MSF.medium[2,1:40,]))
plot(as.numeric(square.dif.MSF.medium[5,1:40,]))
plot(as.numeric(square.dif.MSF.medium[40,1:40,]))
plot(as.numeric(square.dif.MSF.medium[41,1:40,]))
plot(as.numeric(square.dif.MSF.exp[40,1:40,]))
plot(as.numeric(square.dif.MSF.exp[41,1:40,]))
plot(as.numeric(square.dif.MSF.exp[3,1:40,]))
plot(as.numeric(square.dif.MSF.exp[5,1:40,]))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40]))
)
as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40]))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40], na.rm = T)))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40])))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40], na.rm = TRUE)))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40])))
(square.dif.MSF.exp[1:40,1:40])
(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40])))
(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40], na.rm = T)))
(as.numeric(colMeans(square.dif.MSF.exp[1:40,1:40], na.omit)))
plot(as.numeric(colMeans(square.dif.MSF.exp[1:40,])))
points(as.numeric(colMeans(square.dif.MSF.medium[1:40,])), col = "red")
cor(as.numeric(colMeans(square.dif.MSF.exp[1:40,])), as.numeric(colMeans(square.dif.MSF.medium[1:40,])))
cor(as.numeric(colMeans(square.dif.MSF.exp[1:40,])), as.numeric(colMeans(square.dif.MSF.medium[1:40,])))
cor(as.numeric(colMeans(square.dif.MSF.exp[1:40,])), as.numeric(colMeans(square.dif.MSF.medium[1:400,])))
cor(as.numeric(colMeans(square.dif.MSF.exp[1:40,])), as.numeric(colMeans(square.dif.MSF.medium[1:400,])), na.rm = T)
help(colMeans)
s.mean.square.dif.MSF.exp = scale(colMeans(mean.square.dif.MSF.exp, na.rm = T))
s.mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp, na.rm = T))
s.mean.square.dif.MSF.exp
plot(s.mean.square.dif.MSF.exp)
s.mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp))
plot(s.mean.square.dif.MSF.exp)
plot(as.numeric(s.mean.square.dif.MSF.exp))
s.mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp))
s.mean.square.dif.MSF.exp
s.mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp), na.rm = "T")
plot(s.mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site")
s.mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp, na.rm = "T"))
plot(s.mean.square.dif.MSF.exp, ylab = "Square dif MSF", xlab = "site")
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp, na.rm = T)
mean.square.dif.MSF.exp
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:10,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:2,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:3,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:4,], na.rm = T)
plot(mean.square.dif.MSF.exp)
(square.dif.MSF.exp[1:4,])
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:5,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:40,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:2,], na.rm = T)
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = colMeans(square.dif.MSF.exp[1:40,], na.rm = T)
mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp[1:40,], na.rm = T))
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp[1:40,]))
plot(mean.square.dif.MSF.exp)
scale(colMeans(square.dif.MSF.exp[1:40,]))
mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp))
scale(colMeans(square.dif.MSF.exp[1:40,]))
plot(mean.square.dif.MSF.exp)
mean.square.dif.MSF.exp = scale(colMeans(square.dif.MSF.exp[1:40,]))
plot(mean.square.dif.MSF.exp)
# Description:
#
# This is the main program of the project. The program simulates multiple mutants of a given protein using the "Linearly Forced -
# Elastic Network Model" (LF-ENM) with different selection regimens according to the "Stress Model". The program also
# analyzes the multiple alignment of the family to which the protein belongs and calculates measures
# of variabilty of theoretical and experimental structures.
# Experimental structures and the multiple alignment must be obtained from Homstrad.
#
# To run the program it is necessary to previously fill the input ("input_MainProgram.csv") with the following information:
#
#    - family: The family of the protein to mutate.
#    - p.ref: The pdb code (pdbid) of the protein to mutate (example: "1a6m"). The protein must be a member of
#    the selected family. This pdbid must not be included in the dataset ("DATA/family_dataset.csv").
#    - chain.p.ref: The chain of p.ref in the pdb file obtained from Homstrad.
#    - n.mut.p: The number of mutants to generate for each member of the family. For example, if the family has 20
#    members, the program generates n.mut.p x 20 mutants.
#    - fmax: Argument for the "LF-ENM". It is the maximun value for the forces that model the mutations.
#    - R0.CA: The Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins for the CA model.
#    - R0.CM: The Cut-off for the "ANM" (Anisotropic Network Model) that represents the proteins for the two nodes per site model.
#    - rotate: It can be "TRUE" or "FALSE". If it is "TRUE", r.p.2 is rotated in order to minimize RMSD with r.p.ref.
#    - heme: Argument for "globins". It can be "TRUE" or "FALSE". If it is "TRUE", the program considers the heme group.
#    - calculate.betas: It can be "TRUE" or "FALSE". If it is "TRUE", the program calculates betas of the "Stress Model".
#    - analyze.family: It can be "TRUE" or "FALSE". If it is "TRUE", the program analyzes the family.
#    - generate.mutants: It can be "TRUE" or "FALSE". If it is "TRUE", the program generates new mutants.
#    - K.analysis: It can be "K" or "Keff". For "K" or "Keff", the analysis is based on normal modes of "K" or "Keff"
#    respectibly.
### PROGRAM ###
# remove objects from the workspace
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# data dir
data.dir <- "DATA"
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateSideChainCM.fname <- "FUNCTIONS/CalculateSideChainCM.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
CalculateDynamicalVariability.fname <- "FUNCTIONS/CalculateDynamicalVariability.R"
CalculateDaCMCA.fname <- "FUNCTIONS/CalculateDaCMCA.R"
GetCore.fname <- "FUNCTIONS/GetCore.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateSideChainCM.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(CalculateDynamicalVariability.fname)
source(CalculateDaCMCA.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
# start a loop to analyze each family
for (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0.CA[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core of the alignment
GetCore(family,
data.dir,
p.ref)
# calculate distances to the active site
CalculateDaCMCA(family,
p.ref,
chain.p.ref,
heme,
data.dir,
out.dir)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "weak.sel") {
if (regimens[all.betas == b] != "strong.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
}
