library(knitr)
library(markdown)
# read input
input.fname <- "input_MainReport.csv"
input <- read.csv(input.fname)
input[,1]
f = 14
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### Pn
rmarkdown::render('analysis-structure-normal-modes.Rmd',
output_file =  paste("OUT/report_structure_CA_normal_modes_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
R0.CA
R0.CM
input <- read.csv(input.fname)
print(f)
family <- as.character(input$family)[f]
type <- as.character(input$type)[f]
p.ref <- as.character(input$p.ref)[f]
enm <- as.character(input$enm)[f]
n.mut.p <- input$n.mut.p[f]
R0.CA = input$R0.CA[f]
R0.CM = input$R0.CM[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
print(family)
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### Pn
rmarkdown::render('analysis-structure-normal-modes.Rmd',
output_file =  paste("OUT/report_structure_CA_normal_modes_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
# set chunk options
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(ggplot2)
library(reshape2)
library(plyr)
library(quantreg)
library(bio3d)
# load functions
source(file.path(data.dir, "multiplot.R"))
source(file.path(data.dir, "my-functions.R"))
# set my colors
myColors = c("blue", "darkgreen", "red", "red")
names(myColors) <- c("exp", "mut", "strong", "mut+sel")
# set significance factors
f95 = 1.96
f99 = 2.6
f999 = 3.3
# set input filenames
## data
reference.fname = file.path(data.dir, paste(family, "_ref.txt", sep = ""))
protein_list.fname = file.path(data.dir, paste(family, "_list.txt", sep = ""))
site.info.fname = file.path(data.dir, paste(p.ref, "_m.da.ca.csv", sep = ""))
min.da.CM.CA.fname = file.path(data.dir, paste(p.ref, "_min.da.CM.ca.csv", sep = ""))
## profiles to compare
dri2.exp.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.exp.norm.dr.squarei.csv", sep = ""))
dri2.strong.fname = file.path(data.dir, paste(family, "_R0_", R0, "_beta_strong.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
dri2.mut.fname = file.path(data.dir,paste(family, "_R0_", R0, "_beta_no.sel_K.analysis_Keff_out_m.theo.norm.dr.squarei.csv", sep = ""))
# which is the reference protein?
reference = as.character(read.table(reference.fname, header = F)[1, 1])
if (reference != p.ref) {
print("Warning: different references")
}
protein.exp = read.table(protein_list.fname, header = F, stringsAsFactors = F)[, 1]
# read site information of the reference protein
site.info = read.csv(site.info.fname, header = T, sep = ",")
m.min.da.CM.CA = read.csv(min.da.CM.CA.fname)
# add info to site.info
d = ddply(site.info, "site", .fun = function(x) data.frame("da" = min(x[, c(-1, -2)])))
# define shells of active site neighborhood
d$shell = cut(d$da, breaks = c(-.1, 2.5, 7.5, 12.5, 17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5, max(d$da)))
levels(d$shell) = seq(length(levels(d$shell))) - 1 # rename shell levels
site.info = merge(site.info, d, by = "site")
# read reference pdb and calculate resno, AA, and CN
reference.pdb.fname = file.path(data.dir,paste(reference, ".pdb", sep = ""))
ref.pdb = read.pdb(reference.pdb.fname)
inds = atom.select(ref.pdb, elety = "CA")
ref.pdb.ca = ref.pdb$atom[inds$atom,]
cmap.ca = cmap(ref.pdb$xyz[inds$xyz], dcut = R0, scut = 0, mask.lower = F)
CN = rowSums(cmap.ca, na.rm = T) - 1 # diag(cmap.ca) returned by cmap is 1!
AA = ref.pdb.ca$resid
resno = ref.pdb.ca$resno
pdb.info = data.frame(resno, AA, CN)
names(pdb.info) = c("resno", "AA", paste("CN", as.character(R0), sep = ""))
# add pdb.info to site.info
site.info = cbind(site.info, pdb.info)
# read data
## exp
dri2.exp = read.csv(dri2.exp.fname, header = T)
site = site.info$site
dri2.exp = dri2.exp[1:length(protein.exp), site]
rownames(dri2.exp) = protein.exp
## mut
dri2.mut = read.csv(dri2.mut.fname, header = T)
site = site.info$site
dri2.mut = dri2.mut[1:length(protein.exp), site]
rownames(dri2.mut) = paste("mut", rownames(dri2.mut), sep = "")
## strong
dri2.strong = read.csv(dri2.strong.fname, header = T)
site = site.info$site
dri2.strong = dri2.strong[1:length(protein.exp), site]
rownames(dri2.strong) = paste("strong", rownames(dri2.strong), sep = "")
# prepare the data
## exp
tdri2.exp = as.data.frame(t(as.matrix(dri2.exp)))
tdri2.exp = cbind(site.info, tdri2.exp)
siteComparison.exp = melt(tdri2.exp, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
## mut
tdri2.mut = as.data.frame(t(as.matrix(dri2.mut)))
tdri2.mut = cbind(site.info, tdri2.mut)
siteComparison.mut = melt(tdri2.mut, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
## strong
tdri2.strong = as.data.frame(t(as.matrix(dri2.strong)))
tdri2.strong = cbind(site.info, tdri2.strong)
siteComparison.strong = melt(tdri2.strong, id.vars = names(site.info), variable.name = "protein", value.name = "dri2")
# bluild the data.frame
siteComparison.all.datasets = rbind(data.frame("dataset" = "exp", siteComparison.exp),
data.frame("dataset" = "mut", siteComparison.mut),
data.frame("dataset" = "strong", siteComparison.strong))
siteComparison.all.datasets = ddply(siteComparison.all.datasets, c("dataset", "protein"), mutate,
"n.SD" = dri2/mean(dri2, na.rm = T),
"z.SD" = vscale(dri2),
"RSD" = sqrt(dri2),
"n.RSD" = RSD/mean(RSD, na.rm = T),
"z.RSD" = vscale(RSD))
## CA
data.dir <- paste("OUT/out_subset_CA_ANM", sep = "")
R0 = R0.CA
### Pn
rmarkdown::render('analysis-structure-normal-modes.Rmd',
output_file =  paste("OUT/report_structure_CA_normal_modes_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CA_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
## CM
data.dir <- paste("OUT/out_subset_CM_ANM", sep = "")
R0 = R0.CM
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
### RMSD
rmarkdown::render('analysis-structure.Rmd',
output_file =  paste("OUT/report_structure_CM_", family, "_", enm, "_R0_", R0, ".html", sep = ''))
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# data dir
data.dir <- "DATA"
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
GetCore.fname <- "FUNCTIONS/GetCore.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
input[,1]
f = 13
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
# remove objects from the workspace
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# data dir
data.dir <- "DATA"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CM_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CM_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoreticalCM.fname <- "FUNCTIONS/AnalyzeExperimentalTheoreticalCM.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutantsCM.fname <- "FUNCTIONS/GenerateMutantsCM.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateSideChainCM.fname <- "FUNCTIONS/CalculateSideChainCM.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetasCM.fname <- "FUNCTIONS/CalculateBetasCM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetasCM.fname <- "FUNCTIONS/CalculateBetasCMPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoreticalCM.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutantsCM.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateSideChainCM.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetasCM.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
f
f = 13
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
R0
R0=7.5
print(family)
chain
chain.p.ref
# analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetasCM(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "medium.sel") {
if (regimens[all.betas == b] != "weak.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutantsCM(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoreticalCM(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
warnings()
f
rm(list = ls())
# load packages
library(bio3d)
library(seqinr)
# data dir
data.dir <- "DATA"
# set Elastic Network Model: "ANM" or "pfANM"
model <- "ANM"
# output dir
if (model == "ANM") out.dir <- "OUT/out_subset_CA_ANM"
if (model == "pfANM") out.dir <- "OUT/out_subset_CA_pfANM"
# general parameters
tolerance = 1e-10
# function filenames
AnalyzeExperimentalTheoretical.fname <- "FUNCTIONS/AnalyzeExperimentalTheoretical.R"
AnalyzeFamily.fname <- "FUNCTIONS/AnalyzeFamily.R"
AnalyzeAlignment.fname <- "FUNCTIONS/AnalyzeAlignment.R"
GenerateMutants.fname <- "FUNCTIONS/GenerateMutants.R"
ReadFasta.fname <- "FUNCTIONS/ReadFasta.R"
ReadCA.fname <- "FUNCTIONS/ReadCA.R"
ReadHeme.fname <- "FUNCTIONS/ReadHeme.R"
CalculateENMKeff.fname <- "FUNCTIONS/CalculateENMKeff.R"
CalculateENMK.fname <- "FUNCTIONS/CalculateENMK.R"
CalculateVariability.fname <- "FUNCTIONS/CalculateVariability.R"
GetCore.fname <- "FUNCTIONS/GetCore.R"
WindowsRMSD.fname <- "FUNCTIONS/WindowsRMSD.R"
WindowsRMSDcontacts.fname <- "FUNCTIONS/WindowsRMSDcontacts.R"
if (model == "ANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetas.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKij.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForce.R"
}
if (model == "pfANM") {
CalculateBetas.fname <- "FUNCTIONS/CalculateBetasPFANM.R"
CalculateKij.fname <- "FUNCTIONS/CalculateKijPFANM.R"
CalculateForce.fname <- "FUNCTIONS/CalculateForcePFANM.R"
}
# source functions
source(AnalyzeExperimentalTheoretical.fname)
source(AnalyzeFamily.fname)
source(AnalyzeAlignment.fname)
source(GenerateMutants.fname)
source(ReadFasta.fname)
source(ReadCA.fname)
source(ReadHeme.fname)
source(CalculateENMKeff.fname)
source(CalculateENMK.fname)
source(CalculateVariability.fname)
source(GetCore.fname)
source(WindowsRMSD.fname)
source(WindowsRMSDcontacts.fname)
source(CalculateBetas.fname)
source(CalculateKij.fname)
source(CalculateForce.fname)
# read input
input.fname <- file.path("input_MainProgram.csv")
input <- read.csv(input.fname)
f = 13
r (f in (1:nrow(input))) {
family <- as.character(input$family)[f]
p.ref <- as.character(input$p.ref)[f]
chain.p.ref <- as.character(input$chain.p.ref)[f]
n.mut.p = input$n.mut.p[f]
fmax = input$fmax[f]
R0 = input$R0[f]
rotate <- input$rotate[f]
heme <- input$heme[f]
calculate.betas <- input$calculate.betas[f]
analyze.family <- input$analyze.family[f]
generate.mutants <- input$generate.mutants[f]
analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]
K.analysis <- input$K.analysis[f]
print(family)
# Analyze the alignment of the family
if (analyze.family == "TRUE") {
AnalyzeFamily(family,
p.ref,
data.dir,
out.dir)
}
# get the core
GetCore(family,
data.dir,
p.ref)
# generate id for betas output filename
betas.fname.id <- paste(family, "_", p.ref, "_R0_", R0, sep = "")
# calculate betas of the "Stress Model"
if (calculate.betas == "TRUE") {
CalculateBetas(chain.p.ref,
fmax,
R0,
heme,
data.dir,
out.dir,
betas.fname.id,
tolerance)
}
# read betas and stablish selection regimens
all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, "_out_all.betas.csv", sep = "")))
regimens <- c("strong.sel", "medium.sel", "weak.sel", "no.sel")
# start a loop for each beta
for (b in all.betas)  {
# filter regimens
if (regimens[all.betas == b] != "medium.sel") {
if (regimens[all.betas == b] != "weak.sel") {
# generate ids for output filenames
mut.fname.id <- paste(family, "_R0_", R0, "_beta_", regimens[all.betas == b], sep = "")
analysis.fname.id <- paste(mut.fname.id, "_K.analysis_", K.analysis, sep = "")
# generate mutants
if (generate.mutants == "TRUE") {
GenerateMutants(family,
chain.p.ref,
n.mut.p,
fmax,
R0,
b,
heme,
data.dir,
out.dir,
mut.fname.id,
tolerance)
}
# calculate measures of variability of theoretical and experimental proteins
if (analyze.experimental.theoretical == "TRUE") {
AnalyzeExperimentalTheoretical(family,
p.ref,
chain.p.ref,
n.mut.p,
R0,
rotate,
heme,
K.analysis,
data.dir,
out.dir,
mut.fname.id,
analysis.fname.id,
tolerance)
}
}
}
}
