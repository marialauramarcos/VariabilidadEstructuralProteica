import cPickle, base64
try:
	from SimpleSession.versions.v65 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 11, 2, 41376])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v65 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSwFOfYdVCWJhbGxTY2FsZXEDSwFHP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLAUc/8AAAAAAAAH2HVQVjb2xvcnEFSwFLAH2HVQpyaWJib25UeXBlcQZLAUsAfYdVCnN0aWNrU2NhbGVxB0sBRz/wAAAAAAAAfYdVDG1tQ0lGSGVhZGVyc3EIXXEJTmFVDGFyb21hdGljTW9kZXEKSwFLAX2HVQp2ZHdEZW5zaXR5cQtLAUdAFAAAAAAAAH2HVQZoaWRkZW5xDEsBiX2HVQ1hcm9tYXRpY0NvbG9ycQ1LAU59h1UPcmliYm9uU21vb3RoaW5ncQ5LAUsAfYdVCWF1dG9jaGFpbnEPSwGIfYdVCnBkYlZlcnNpb25xEEsBSwJ9h1UIb3B0aW9uYWxxEX1xElUIb3BlbmVkQXNxE4iJSwEoWIEAAABDOlxVc2Vyc1xNYXLDrWEgTGF1cmFcRGVza3RvcFxWYXJpYWJpbGlkYWRFc3RydWN0dXJhbFByb3RlaWNhXFZhcmlhYmlsaWRhZEVzdHJ1Y3R1cmFsUHJvdGVpY2FcT1VUXG91dF9zdWJzZXRfQ01fQU5NXDFtY3RhX2V4cC5wZGJxFFUDUERCcRVOiXRxFn2Hh3NVD2xvd2VyQ2FzZUNoYWluc3EXSwGJfYdVCWxpbmVXaWR0aHEYSwFHP/AAAAAAAAB9h1UPcmVzaWR1ZUxhYmVsUG9zcRlLAUsAfYdVBG5hbWVxGksBWA0AAAAxbWN0YV9leHAucGRifYdVD2Fyb21hdGljRGlzcGxheXEbSwGJfYdVD3JpYmJvblN0aWZmbmVzc3EcSwFHP+mZmZmZmZp9h1UKcGRiSGVhZGVyc3EdXXEefXEfYVUDaWRzcSBLAUsASwCGfYdVDnN1cmZhY2VPcGFjaXR5cSFLAUe/8AAAAAAAAH2HVRBhcm9tYXRpY0xpbmVUeXBlcSJLAUsCfYdVFHJpYmJvbkhpZGVzTWFpbmNoYWlucSNLAYh9h1UHZGlzcGxheXEkSwGIfYd1Lg=='))
	resInfo = cPickle.loads(base64.b64decode('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'))
	atomInfo = cPickle.loads(base64.b64decode(''))
	bondInfo = cPickle.loads(base64.b64decode('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'))
	crdInfo = cPickle.loads(base64.b64decode(''))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'customVisibility': [], 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), 'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), 'Rf': ((0.8, 0, 0.34902), 1, u'default'), 'Ra': ((0, 0.490196, 0), 1, u'default'), 'slate gray': ((0.439216, 0.501961, 0.564706), 1, u'default'), 'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), 'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), 'Be': ((0.760784, 1, 0), 1, u'default'), 'Ba': ((0, 0.788235, 0), 1, u'default'), 'Bh': ((0.878431, 0, 0.219608), 1, u'default'), 'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), 'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), 'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), 'H': ((1, 1, 1), 1, u'default'), 'P': ((1, 0.501961, 0), 1, u'default'), 'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), 'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), 'Gd': ((0.270588, 1, 0.780392), 1, u'default'), 'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'), 'Pr': ((0.85098, 1, 0.780392), 1, u'default'), 'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), 'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'),
'Pu': ((0, 0.419608, 1), 1, u'default'), 'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), 'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), 'Pa': ((0, 0.631373, 1), 1, u'default'), 'Pd': ((0, 0.411765, 0.521569), 1, u'default'), 'Cd': ((1, 0.85098, 0.560784), 1, u'default'), 'Po': ((0.670588, 0.360784, 0), 1, u'default'), 'Pm': ((0.639216, 1, 0.780392), 1, u'default'), 'Hs': ((0.901961, 0, 0.180392), 1, u'default'), 'Ho': ((0, 1, 0.611765), 1, u'default'), 'Hf': ((0.301961, 0.760784, 1), 1, u'default'), 'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), 'He': ((0.85098, 1, 1), 1, u'default'), 'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), 'Mg': ((0.541176, 1, 0), 1, u'default'), 'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), 'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), 'O': ((1, 0.0509804, 0.0509804), 1, u'default'), 'Mt': ((0.921569, 0, 0.14902), 1, u'default'), 'S': ((1, 1, 0.188235), 1, u'default'), 'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), 'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), 'Eu': ((0.380392, 1, 0.780392), 1, u'default'),
'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), 'Er': ((0, 0.901961, 0.458824), 1, u'default'), 'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), 'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), 'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), 'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), 'Nd': ((0.780392, 1, 0.780392), 1, u'default'), 'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), 'Np': ((0, 0.501961, 1), 1, u'default'), 'Fr': ((0.258824, 0, 0.4), 1, u'default'), 'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), 'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), 'B': ((1, 0.709804, 0.709804), 1, u'default'), 'F': ((0.564706, 0.878431, 0.313725), 1, u'default'), 'Sr': ((0, 1, 0), 1, u'default'), 'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), 'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), 'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), 'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), 'Sm': ((0.560784, 1, 0.780392), 1, u'default'), 'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), 'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'),
'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), 'Sg': ((0.85098, 0, 0.270588), 1, u'default'), 'Se': ((1, 0.631373, 0), 1, u'default'), 'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), 'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), 'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), 'Ca': ((0.239216, 1, 0), 1, u'default'), 'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), 'Ce': ((1, 1, 0.780392), 1, u'default'), 'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), 'Tm': ((0, 0.831373, 0.321569), 1, u'default'), 'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'), 'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), 'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), 'La': ((0.439216, 0.831373, 1), 1, u'default'), 'Li': ((0.8, 0.501961, 1), 1, u'default'), 'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), 'Lu': ((0, 0.670588, 0.141176), 1, u'default'), 'Lr': ((0.780392, 0, 0.4), 1, u'default'), 'Th': ((0, 0.729412, 1), 1, u'default'), 'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'), 'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'),
'Te': ((0.831373, 0.478431, 0), 1, u'default'), 'Tb': ((0.188235, 1, 0.780392), 1, u'default'), 'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), 'Ta': ((0.301961, 0.65098, 1), 1, u'default'), 'pink': ((1, 0.752941, 0.796078), 1, u'default'), 'Yb': ((0, 0.74902, 0.219608), 1, u'default'), 'Db': ((0.819608, 0, 0.309804), 1, u'default'), 'Dy': ((0.121569, 1, 0.780392), 1, u'default'), 'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), 'I': ((0.580392, 0, 0.580392), 1, u'default'), 'medium purple': ((0.576471, 0.439216, 0.858824), 1, u'default'), 'U': ((0, 0.560784, 1), 1, u'default'), 'Y': ((0.580392, 1, 1), 1, u'default'), 'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), 'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), 'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), 'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), 'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), 'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), 'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), 'Au': ((1, 0.819608, 0.137255), 1, u'default'),
'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), 'In': ((0.65098, 0.458824, 0.45098), 1, u'default'), 'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default')}
	materials = {u'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 43, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (131, (u'', (0.0179104, 0.0179104, 1, 1)), {(u'', (0.632836, 0.632836, 1, 1)): [66], (u'', (1, 0.483582, 0.483582, 1)): [99], (u'', (0.525373, 0.525373, 1, 1)): [109], (u'', (0.579104, 0.579104, 1, 1)): [118], (u'', (0.370149, 0.370149, 1, 1)): [76], (u'', (0.0358209, 0.0358209, 1, 1)): [23], (u'', (0.322388, 0.322388, 1, 1)): [37], (u'', (1, 0.985075, 0.985075, 1)): [40], (u'', (0.256716, 0.256716, 1, 1)): [46], (u'', (0.501493, 0.501493, 1, 1)): [127], (u'', (0.692537, 0.692537, 1, 1)): [117], (u'', (0.244776, 0.244776, 1, 1)): [22], (u'', (0.185075, 0.185075, 1, 1)): [45], (u'', (1, 0.901493, 0.901493, 1)): [107], (u'', (0.0298508, 0.0298508, 1, 1)): [25], (u'', (1, 0.561194, 0.561194, 1)): [108], (u'', (0.465672, 0.465672, 1, 1)): [60], (u'', (1, 0.955224, 0.955224, 1)): [71], (u'', (0.489552, 0.489552, 1, 1)): [128], (u'', (0.78806, 0.78806, 1, 1)): [48], (u'', (0.274627, 0.274627, 1, 1)): [112], (u'', (0, 0, 1, 1)): [13], (u'green', (0, 1, 0, 1)): [130], (u'', (0.573134, 0.573134, 1, 1)): [119], (u'', (0.0776119, 0.0776119, 1, 1)): [110], (u'', (0.179104, 0.179104, 1, 1)): [61], (u'', (0.704478, 0.704478, 1, 1)): [73],
(u'', (0.340299, 0.340299, 1, 1)): [103], (u'', (1, 0.471642, 0.471642, 1)): [82], (u'', (0.8, 0.8, 1, 1)): [94], (u'', (1, 0, 0, 1)): [84], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'', (0.125373, 0.125373, 1, 1)): [90], (u'', (0.0537313, 0.0537313, 1, 1)): [78], (u'', (0.537313, 0.537313, 1, 1)): [111], (u'', (0.829851, 0.829851, 1, 1)): [20], (u'', (0.214925, 0.214925, 1, 1)): [29], (u'', (0.0656716, 0.0656716, 1, 1)): [89], (u'', (0.316418, 0.316418, 1, 1)): [58], (u'', (0.698507, 0.698507, 1, 1)): [87], (u'', (0.477612, 0.477612, 1, 1)): [41], (u'black', (0, 0, 0, 1)): [126], (u'', (0.0716418, 0.0716418, 1, 1)): [24], (u'', (0.041791, 0.041791, 1, 1)): [12], (u'', (0.226866, 0.226866, 1, 1)): [30], (u'', (0.985075, 0.985075, 1, 1)): [52], (u'', (0.143284, 0.143284, 1, 1)): [5], (u'', (1, 0.931343, 0.931343, 1)): [124], (u'', (1, 0.0716419, 0.0716419, 1)): [39], (u'', (1, 0.376119, 0.376119, 1)): [19], (u'', (0.459701, 0.459701, 1, 1)): [114], (u'', (0.429851, 0.429851, 1, 1)): [10], (u'', (0.334328, 0.334328, 1, 1)): [77], (u'', (0.310448, 0.310448, 1, 1)): [54],
(u'', (0.0119403, 0.0119403, 1, 1)): [14], (u'', (0.101493, 0.101493, 1, 1)): [121], (u'', (0.78209, 0.78209, 1, 1)): [50], (u'', (0.352239, 0.352239, 1, 1)): [123], (u'', (1, 0.686567, 0.686567, 1)): [72], (u'', (0.119403, 0.119403, 1, 1)): [16], (u'', (0.131343, 0.131343, 1, 1)): [35], (u'', (0.585075, 0.585075, 1, 1)): [74], (u'', (0.901493, 0.901493, 1, 1)): [21], (u'', (0.0895522, 0.0895522, 1, 1)): [15], (u'', (0.483582, 0.483582, 1, 1)): [7], (u'', (0.39403, 0.39403, 1, 1)): [116], (u'', (0.620896, 0.620896, 1, 1)): [95], (u'', (0.161194, 0.161194, 1, 1)): [6], (u'', (0.202985, 0.202985, 1, 1)): [56], (u'', (0.364179, 0.364179, 1, 1)): [120], (u'', (1, 0.161194, 0.161194, 1)): [83], (u'', (0.0835821, 0.0835821, 1, 1)): [32], (u'', (0.543284, 0.543284, 1, 1)): [47], (u'', (0.173134, 0.173134, 1, 1)): [36], (u'', (0.167164, 0.167164, 1, 1)): [57], (u'', (0.495522, 0.495522, 1, 1)): [93], (u'', (0.155224, 0.155224, 1, 1)): [2], (u'', (0.208955, 0.208955, 1, 1)): [1], (u'', (0.913433, 0.913433, 1, 1)): [97], (u'', (0.907463, 0.907463, 1, 1)): [8], (u'', (0.0955224, 0.0955224, 1, 1)): [31],
(u'', (0.41194, 0.41194, 1, 1)): [113], (u'', (0.746269, 0.746269, 1, 1)): [105], (u'', (0.555224, 0.555224, 1, 1)): [102], (u'', (0.40597, 0.40597, 1, 1)): [91], (u'', (0.220896, 0.220896, 1, 1)): [42], (u'', (1, 0.746269, 0.746269, 1)): [9], (u'', (0.137313, 0.137313, 1, 1)): [80], (u'', (0.0477612, 0.0477612, 1, 1)): [33], (u'', (0.250746, 0.250746, 1, 1)): [17], (u'', (1, 0.925373, 0.925373, 1)): [96], (u'', (0.328358, 0.328358, 1, 1)): [92], (u'', (0.38806, 0.38806, 1, 1)): [64], (u'', (0.358209, 0.358209, 1, 1)): [122], (u'', (1, 0.79403, 0.79403, 1)): [86], (u'', (0.149254, 0.149254, 1, 1)): [68], (u'', (0.113433, 0.113433, 1, 1)): [79], (u'', (0.447761, 0.447761, 1, 1)): [81], (u'', (0.238806, 0.238806, 1, 1)): [44], (u'', (0.567164, 0.567164, 1, 1)): [88], (u'', (0.722388, 0.722388, 1, 1)): [65], (u'', (1, 0.614925, 0.614925, 1)): [125], (u'', (1, 0.668657, 0.668657, 1)): [85], (u'', (0.107463, 0.107463, 1, 1)): [4], (u'', (1, 0.423881, 0.423881, 1)): [98], (u'', (0.597015, 0.597015, 1, 1)): [18], (u'', (0.346269, 0.346269, 1, 1)): [28], (u'', (0.268657, 0.268657, 1, 1)): [104],
(u'', (0.262687, 0.262687, 1, 1)): [62], (u'', (0.292537, 0.292537, 1, 1)): [59], (u'', (0.883582, 0.883582, 1, 1)): [70], (u'', (0.531343, 0.531343, 1, 1)): [53], (u'', (0.00597014, 0.00597014, 1, 1)): [34], (u'', (0.376119, 0.376119, 1, 1)): [115], (u'', (0.734328, 0.734328, 1, 1)): [100], (u'', (1, 0.543284, 0.543284, 1)): [106], (u'', (0.280597, 0.280597, 1, 1)): [55], (u'', (1, 0.734328, 0.734328, 1)): [38], (u'', (0.662687, 0.662687, 1, 1)): [101], (u'', (0.286567, 0.286567, 1, 1)): [63], (u'yellow', (1, 1, 0, 1)): [43], (u'', (0.507463, 0.507463, 1, 1)): [75], (u'', (0.304478, 0.304478, 1, 1)): [69], (u'', (0.752239, 0.752239, 1, 1)): [49], (u'', (0.823881, 0.823881, 1, 1)): [51], (u'', (0.0597015, 0.0597015, 1, 1)): [26], (u'', (0.197015, 0.197015, 1, 1)): [3], (u'white', (1, 1, 1, 1)): [129], (u'', (0.519403, 0.519403, 1, 1)): [67], (u'', (0.191045, 0.191045, 1, 1)): [11]})
	viewerInfo = {'cameraAttrs': {'center': (2.052, -0.3535, 0.915), 'fieldOfView': 4.8309680011576, 'nearFar': (27.596963226824, -25.766963226824), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 0.915}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': False, 'showShadows': False, 'viewSize': 25.853417325178, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 2, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': True, 'highlight': 0, 'scaleFactor': 1, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 130, 'cameraMode': 'mono', 'detail': 1.5, 'viewerFog': None, 'viewerBG': 129}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v65 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [ ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(1, ('RibbonStyleWorm', [0.432836]), 'rounded', u'amino acid'), (2, ('RibbonStyleWorm', [0.385821]), 'rounded', u'amino acid'), (3, ('RibbonStyleWorm', [0.422388]), 'rounded', u'amino acid'), (4, ('RibbonStyleWorm', [0.432836]), 'rounded', u'amino acid'), (5, ('RibbonStyleWorm', [0.34403]), 'rounded', u'amino acid'), (6, ('RibbonStyleWorm', [0.375373]), 'rounded', u'amino acid'), (7, ('RibbonStyleWorm', [0.391045]), 'rounded', u'amino acid'), (8, ('RibbonStyleWorm', [0.673134]), 'rounded', u'amino acid'), (9, ('RibbonStyleWorm', [1.04403]), 'rounded', u'amino acid'), (10, ('RibbonStyleWorm', [1.34701]), 'rounded', u'amino acid'), (11, ('RibbonStyleWorm', [0.626119]), 'rounded', u'amino acid'), (12, ('RibbonStyleWorm', [0.417164]), 'rounded', u'amino acid'), (13, ('RibbonStyleWorm', [0.34403]), 'rounded', u'amino acid'), (14, ('RibbonStyleWorm', [0.286567]), 'rounded', u'amino acid'), (15, ('RibbonStyleWorm', [0.25]), 'rounded', u'amino acid'), (16, ('RibbonStyleWorm', [0.260448]), 'rounded', u'amino acid'), (17, ('RibbonStyleWorm', [0.328358]), 'rounded', u'amino acid'),
(18, ('RibbonStyleWorm', [0.354478]), 'rounded', u'amino acid'), (19, ('RibbonStyleWorm', [0.469403]), 'rounded', u'amino acid'), (20, ('RibbonStyleWorm', [0.772388]), 'rounded', u'amino acid'), (21, ('RibbonStyleWorm', [1.6709]), 'rounded', u'amino acid'), (22, ('RibbonStyleWorm', [0.976119]), 'rounded', u'amino acid'), (23, ('RibbonStyleWorm', [1.03881]), 'rounded', u'amino acid'), (24, ('RibbonStyleWorm', [0.464179]), 'rounded', u'amino acid'), (25, ('RibbonStyleWorm', [0.281343]), 'rounded', u'amino acid'), (26, ('RibbonStyleWorm', [0.312687]), 'rounded', u'amino acid'), (27, ('RibbonStyleWorm', [0.276119]), 'rounded', u'amino acid'), (28, ('RibbonStyleWorm', [0.302239]), 'rounded', u'amino acid'), (29, ('RibbonStyleWorm', [0.265672]), 'rounded', u'amino acid'), (30, ('RibbonStyleWorm', [0.417164]), 'rounded', u'amino acid'), (31, ('RibbonStyleWorm', [0.552985]), 'rounded', u'amino acid'), (32, ('RibbonStyleWorm', [0.43806]), 'rounded', u'amino acid'), (33, ('RibbonStyleWorm', [0.448507]), 'rounded', u'amino acid'), (34, ('RibbonStyleWorm', [0.333582]), 'rounded', u'amino acid'),
(35, ('RibbonStyleWorm', [0.323134]), 'rounded', u'amino acid'), (36, ('RibbonStyleWorm', [0.291791]), 'rounded', u'amino acid'), (37, ('RibbonStyleWorm', [0.25]), 'rounded', u'amino acid'), (38, ('RibbonStyleWorm', [0.255224]), 'rounded', u'amino acid'), (39, ('RibbonStyleWorm', [0.281343]), 'rounded', u'amino acid'), (40, ('RibbonStyleWorm', [0.364925]), 'rounded', u'amino acid'), (41, ('RibbonStyleWorm', [0.401493]), 'rounded', u'amino acid'), (42, ('RibbonStyleWorm', [0.53209]), 'rounded', u'amino acid'), (43, ('RibbonStyleWorm', [1.35746]), 'rounded', u'amino acid'), (44, ('RibbonStyleWorm', [1.93731]), 'rounded', u'amino acid'), (45, ('RibbonStyleWorm', [1.13806]), 'rounded', u'amino acid'), (46, ('RibbonStyleWorm', [0.66791]), 'rounded', u'amino acid'), (47, ('RibbonStyleWorm', [0.443284]), 'rounded', u'amino acid'), (48, ('RibbonStyleWorm', [0.385821]), 'rounded', u'amino acid'), (49, ('RibbonStyleWorm', [0.323134]), 'rounded', u'amino acid'), (50, ('RibbonStyleWorm', [0.312687]), 'rounded', u'amino acid'), (51, ('RibbonStyleWorm', [0.333582]), 'rounded', u'amino acid'),
(52, ('RibbonStyleWorm', [0.458955]), 'rounded', u'amino acid'), (53, ('RibbonStyleWorm', [0.41194]), 'rounded', u'amino acid'), (54, ('RibbonStyleWorm', [0.474627]), 'rounded', u'amino acid'), (55, ('RibbonStyleWorm', [0.725373]), 'rounded', u'amino acid'), (56, ('RibbonStyleWorm', [0.939552]), 'rounded', u'amino acid'), (57, ('RibbonStyleWorm', [0.908209]), 'rounded', u'amino acid'), (58, ('RibbonStyleWorm', [0.934328]), 'rounded', u'amino acid'), (59, ('RibbonStyleWorm', [0.970896]), 'rounded', u'amino acid'), (60, ('RibbonStyleWorm', [1.11194]), 'rounded', u'amino acid'), (61, ('RibbonStyleWorm', [0.714925]), 'rounded', u'amino acid'), (62, ('RibbonStyleWorm', [0.521642]), 'rounded', u'amino acid'), (63, ('RibbonStyleWorm', [0.495522]), 'rounded', u'amino acid'), (64, ('RibbonStyleWorm', [0.427612]), 'rounded', u'amino acid'), (65, ('RibbonStyleWorm', [0.396269]), 'rounded', u'amino acid'), (66, ('RibbonStyleWorm', [0.396269]), 'rounded', u'amino acid'), (67, ('RibbonStyleWorm', [0.526866]), 'rounded', u'amino acid'), (68, ('RibbonStyleWorm', [0.50597]), 'rounded', u'amino acid'),
(69, ('RibbonStyleWorm', [0.657463]), 'rounded', u'amino acid'), (70, ('RibbonStyleWorm', [0.41194]), 'rounded', u'amino acid'), (71, ('RibbonStyleWorm', [0.406716]), 'rounded', u'amino acid'), (72, ('RibbonStyleWorm', [0.448507]), 'rounded', u'amino acid'), (73, ('RibbonStyleWorm', [0.458955]), 'rounded', u'amino acid'), (74, ('RibbonStyleWorm', [0.479851]), 'rounded', u'amino acid'), (75, ('RibbonStyleWorm', [0.500746]), 'rounded', u'amino acid'), (76, ('RibbonStyleWorm', [0.401493]), 'rounded', u'amino acid'), (77, ('RibbonStyleWorm', [0.589552]), 'rounded', u'amino acid'), (78, ('RibbonStyleWorm', [0.88209]), 'rounded', u'amino acid'), (79, ('RibbonStyleWorm', [1.03881]), 'rounded', u'amino acid'), (80, ('RibbonStyleWorm', [0.803731]), 'rounded', u'amino acid'), (81, ('RibbonStyleWorm', [0.704478]), 'rounded', u'amino acid'), (82, ('RibbonStyleWorm', [0.364925]), 'rounded', u'amino acid'), (83, ('RibbonStyleWorm', [0.328358]), 'rounded', u'amino acid'), (84, ('RibbonStyleWorm', [0.286567]), 'rounded', u'amino acid'), (85, ('RibbonStyleWorm', [0.260448]), 'rounded', u'amino acid'),
(86, ('RibbonStyleWorm', [0.260448]), 'rounded', u'amino acid'), (87, ('RibbonStyleWorm', [0.312687]), 'rounded', u'amino acid'), (88, ('RibbonStyleWorm', [0.364925]), 'rounded', u'amino acid'), (89, ('RibbonStyleWorm', [0.422388]), 'rounded', u'amino acid'), (90, ('RibbonStyleWorm', [0.380597]), 'rounded', u'amino acid'), (91, ('RibbonStyleWorm', [0.479851]), 'rounded', u'amino acid'), (92, ('RibbonStyleWorm', [0.688806]), 'rounded', u'amino acid'), (93, ('RibbonStyleWorm', [0.448507]), 'rounded', u'amino acid'), (94, ('RibbonStyleWorm', [0.474627]), 'rounded', u'amino acid'), (95, ('RibbonStyleWorm', [0.469403]), 'rounded', u'amino acid'), (96, ('RibbonStyleWorm', [0.464179]), 'rounded', u'amino acid'), (97, ('RibbonStyleWorm', [0.589552]), 'rounded', u'amino acid'), (98, ('RibbonStyleWorm', [0.772388]), 'rounded', u'amino acid'), (99, ('RibbonStyleWorm', [0.589552]), 'rounded', u'amino acid'), (100, ('RibbonStyleWorm', [0.406716]), 'rounded', u'amino acid'), (101, ('RibbonStyleWorm', [0.401493]), 'rounded', u'amino acid'), (102, ('RibbonStyleWorm', [0.396269]), 'rounded', u'amino acid'),
(103, ('RibbonStyleWorm', [0.375373]), 'rounded', u'amino acid'), (104, ('RibbonStyleWorm', [0.406716]), 'rounded', u'amino acid'), (105, ('RibbonStyleWorm', [0.41194]), 'rounded', u'amino acid'), (106, ('RibbonStyleWorm', [0.516418]), 'rounded', u'amino acid'), (107, ('RibbonStyleWorm', [1.02313]), 'rounded', u'amino acid'), (108, ('RibbonStyleWorm', [1.16418]), 'rounded', u'amino acid'), (109, ('RibbonStyleWorm', [1.39925]), 'rounded', u'amino acid'), (110, ('RibbonStyleWorm', [0.866418]), 'rounded', u'amino acid'), (111, ('RibbonStyleWorm', [0.866418]), 'rounded', u'amino acid'), (112, ('RibbonStyleWorm', [0.76194]), 'rounded', u'amino acid'), (113, ('RibbonStyleWorm', [0.76194]), 'rounded', u'amino acid'), (114, ('RibbonStyleWorm', [0.69403]), 'rounded', u'amino acid'), (115, ('RibbonStyleWorm', [0.573881]), 'rounded', u'amino acid'), (116, ('RibbonStyleWorm', [0.458955]), 'rounded', u'amino acid'), (117, ('RibbonStyleWorm', [0.542537]), 'rounded', u'amino acid'), (118, ('RibbonStyleWorm', [0.302239]), 'rounded', u'amino acid'), (119, ('RibbonStyleWorm', [0.297015]), 'rounded', u'amino acid'),
(120, ('RibbonStyleWorm', [0.281343]), 'rounded', u'amino acid'), (121, ('RibbonStyleWorm', [0.281343]), 'rounded', u'amino acid'), (122, ('RibbonStyleWorm', [0.349254]), 'rounded', u'amino acid'), (123, ('RibbonStyleWorm', [0.34403]), 'rounded', u'amino acid'), (124, ('RibbonStyleWorm', [0.370149]), 'rounded', u'amino acid'), (125, ('RibbonStyleWorm', [0.641791]), 'rounded', u'amino acid'), (126, ('RibbonStyleWorm', [1.58731]), 'rounded', u'amino acid'), (127, ('RibbonStyleWorm', [1.85896]), 'rounded', u'amino acid'), (128, ('RibbonStyleWorm', [2]), 'rounded', u'amino acid'), (129, ('RibbonStyleWorm', [1.41493]), 'rounded', u'amino acid'), (130, ('RibbonStyleWorm', [1.30522]), 'rounded', u'amino acid'), (131, ('RibbonStyleWorm', [0.861194]), 'rounded', u'amino acid'), (132, ('RibbonStyleWorm', [0.746269]), 'rounded', u'amino acid'), (133, ('RibbonStyleWorm', [0.589552]), 'rounded', u'amino acid'), (134, ('RibbonStyleWorm', [0.380597]), 'rounded', u'amino acid'), (135, ('RibbonStyleWorm', [0.307463]), 'rounded', u'amino acid'), (136, ('RibbonStyleWorm', [0.307463]), 'rounded', u'amino acid'),
(137, ('RibbonStyleWorm', [0.323134]), 'rounded', u'amino acid'), (138, ('RibbonStyleWorm', [0.359701]), 'rounded', u'amino acid'), (139, ('RibbonStyleWorm', [0.469403]), 'rounded', u'amino acid'), (140, ('RibbonStyleWorm', [0.43806]), 'rounded', u'amino acid'), (141, ('RibbonStyleWorm', [0.605224]), 'rounded', u'amino acid'), (142, ('RibbonStyleWorm', [0.537313]), 'rounded', u'amino acid'), (143, ('RibbonStyleWorm', [0.469403]), 'rounded', u'amino acid'), (144, ('RibbonStyleWorm', [0.683582]), 'rounded', u'amino acid'), (145, ('RibbonStyleWorm', [0.772388]), 'rounded', u'amino acid'), (146, ('RibbonStyleWorm', [0.939552]), 'rounded', u'amino acid'), (147, ('RibbonStyleWorm', [0.95]), 'rounded', u'amino acid'), (148, ('RibbonStyleWorm', [0.793284]), 'rounded', u'amino acid'), (149, ('RibbonStyleWorm', [0.939552]), 'rounded', u'amino acid'), (150, ('RibbonStyleWorm', [1.03881]), 'rounded', u'amino acid'), (151, ('RibbonStyleWorm', [1.1903]), 'rounded', u'amino acid'), (152, ('RibbonStyleWorm', [1.04925]), 'rounded', u'amino acid'), (153, ('RibbonStyleWorm', [1.6291]), 'rounded', u'amino acid'),
(154, ('RibbonStyleWorm', [1.57687]), 'rounded', u'amino acid'), (155, ('RibbonStyleWorm', [0.892537]), 'rounded', u'amino acid'), (156, ('RibbonStyleWorm', [0.725373]), 'rounded', u'amino acid'), (157, ('RibbonStyleWorm', [0.829851]), 'rounded', u'amino acid'), (158, ('RibbonStyleWorm', [0.735821]), 'rounded', u'amino acid'), (159, ('RibbonStyleWorm', [0.547761]), 'rounded', u'amino acid'), (160, ('RibbonStyleWorm', [0.43806]), 'rounded', u'amino acid'), (161, ('RibbonStyleWorm', [0.485075]), 'rounded', u'amino acid'), (162, ('RibbonStyleWorm', [0.417164]), 'rounded', u'amino acid'), (163, ('RibbonStyleWorm', [0.537313]), 'rounded', u'amino acid'), (164, ('RibbonStyleWorm', [0.547761]), 'rounded', u'amino acid'), (165, ('RibbonStyleWorm', [0.902985]), 'rounded', u'amino acid'), (166, ('RibbonStyleWorm', [1.52463]), 'rounded', u'amino acid'), (167, ('RibbonStyleWorm', [1.21119]), 'rounded', u'amino acid'), (168, ('RibbonStyleWorm', [1.50896]), 'rounded', u'amino acid'), (169, ('RibbonStyleWorm', [0.709701]), 'rounded', u'amino acid'), (170, ('RibbonStyleWorm', [0.443284]), 'rounded', u'amino acid'),
(171, ('RibbonStyleWorm', [0.31791]), 'rounded', u'amino acid'), (172, ('RibbonStyleWorm', [0.302239]), 'rounded', u'amino acid'), (173, ('RibbonStyleWorm', [0.307463]), 'rounded', u'amino acid'), (174, ('RibbonStyleWorm', [0.391045]), 'rounded', u'amino acid'), (175, ('RibbonStyleWorm', [0.359701]), 'rounded', u'amino acid'), (176, ('RibbonStyleWorm', [0.302239]), 'rounded', u'amino acid'), (177, ('RibbonStyleWorm', [0.302239]), 'rounded', u'amino acid'), (178, ('RibbonStyleWorm', [0.276119]), 'rounded', u'amino acid'), (179, ('RibbonStyleWorm', [0.255224]), 'rounded', u'amino acid'), (180, ('RibbonStyleWorm', [0.333582]), 'rounded', u'amino acid'), (181, ('RibbonStyleWorm', [0.297015]), 'rounded', u'amino acid'), (182, ('RibbonStyleWorm', [0.380597]), 'rounded', u'amino acid'), (183, ('RibbonStyleWorm', [0.458955]), 'rounded', u'amino acid'), (184, ('RibbonStyleWorm', [0.720149]), 'rounded', u'amino acid'), (185, ('RibbonStyleWorm', [0.678358]), 'rounded', u'amino acid'), (186, ('RibbonStyleWorm', [0.547761]), 'rounded', u'amino acid'), (187, ('RibbonStyleWorm', [0.406716]), 'rounded', u'amino acid'),
(188, ('RibbonStyleWorm', [0.359701]), 'rounded', u'amino acid'), (189, ('RibbonStyleWorm', [0.391045]), 'rounded', u'amino acid'), (190, ('RibbonStyleWorm', [0.333582]), 'rounded', u'amino acid'), (191, ('RibbonStyleWorm', [0.34403]), 'rounded', u'amino acid'), (192, ('RibbonStyleWorm', [0.41194]), 'rounded', u'amino acid'), (193, ('RibbonStyleWorm', [0.490299]), 'rounded', u'amino acid'), (194, ('RibbonStyleWorm', [0.626119]), 'rounded', u'amino acid'), (195, ('RibbonStyleWorm', [0.610448]), 'rounded', u'amino acid'), (196, ('RibbonStyleWorm', [0.652239]), 'rounded', u'amino acid'), (197, ('RibbonStyleWorm', [0.579104]), 'rounded', u'amino acid'), (198, ('RibbonStyleWorm', [0.594776]), 'rounded', u'amino acid'), (199, ('RibbonStyleWorm', [0.594776]), 'rounded', u'amino acid'), (200, ('RibbonStyleWorm', [0.85597]), 'rounded', u'amino acid'), (201, ('RibbonStyleWorm', [0.756716]), 'rounded', u'amino acid'), (202, ('RibbonStyleWorm', [0.751493]), 'rounded', u'amino acid'), (203, ('RibbonStyleWorm', [0.568657]), 'rounded', u'amino acid'), (204, ('RibbonStyleWorm', [0.443284]), 'rounded', u'amino acid'),
(205, ('RibbonStyleWorm', [0.338806]), 'rounded', u'amino acid'), (206, ('RibbonStyleWorm', [0.370149]), 'rounded', u'amino acid'), (207, ('RibbonStyleWorm', [0.31791]), 'rounded', u'amino acid'), (208, ('RibbonStyleWorm', [0.391045]), 'rounded', u'amino acid'), (209, ('RibbonStyleWorm', [0.391045]), 'rounded', u'amino acid'), (210, ('RibbonStyleWorm', [0.432836]), 'rounded', u'amino acid'), (211, ('RibbonStyleWorm', [0.333582]), 'rounded', u'amino acid'), (212, ('RibbonStyleWorm', [0.359701]), 'rounded', u'amino acid'), (213, ('RibbonStyleWorm', [0.417164]), 'rounded', u'amino acid'), (214, ('RibbonStyleWorm', [0.479851]), 'rounded', u'amino acid'), (215, ('RibbonStyleWorm', [0.417164]), 'rounded', u'amino acid'), (216, ('RibbonStyleWorm', [0.328358]), 'rounded', u'amino acid'), (217, ('RibbonStyleWorm', [0.43806]), 'rounded', u'amino acid'), (218, ('RibbonStyleWorm', [0.563433]), 'rounded', u'amino acid'), (219, ('RibbonStyleWorm', [0.558209]), 'rounded', u'amino acid'), (220, ('RibbonStyleWorm', [0.526866]), 'rounded', u'amino acid'), (221, ('RibbonStyleWorm', [0.861194]), 'rounded', u'amino acid'),
(222, ('RibbonStyleWorm', [1.18507]), 'rounded', u'amino acid'), (223, ('RibbonStyleWorm', [1.46194]), 'rounded', u'amino acid')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDWgEVQRtb2RlcQ5VBmxpbmVhcnEPdWJVCGtleWZyYW1lcRBoBSmBcRF9cRIoaAhLFGgJSwFoCl1xE2gMYWgNaBBoDmgPdWJVBXNjZW5lcRRoBSmBcRV9cRYoaAhLAWgJSwFoCl1xF2gMYWgNaBRoDmgPdWJ1Yi4='
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [30.0, (0.85, 0.85, 0.85), 1.0], 'back': [(0.35740674433659325, 0.6604015517481454, -0.6604015517481455), (1.0, 1.0, 1.0), 0.0], 'mode': 'two-point', 'key': [(-0.35740674433659325, 0.6604015517481454, 0.6604015517481455), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.25056280708573153, 0.25056280708573153, 0.9351131265310293), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restore_surface_color_mapping():
 try:
  surface_color_state = \
   {
    'class': 'Surface_Colorings_State',
    'coloring_table': {},
    'geometry': None,
    'is_visible': False,
    'version': 2,
   }
  import SurfaceColor.session
  SurfaceColor.session.restore_surface_color_state(surface_color_state)
 except:
  reportRestoreError('Error restoring surface color mapping')

registerAfterModelsCB(restore_surface_color_mapping)


try:
	import Ilabel
	il = Ilabel.LabelsModel(create=False)
	if il:
		il.destroy()
	il = Ilabel.LabelsModel()
	il.restoreSession({'labelIDs': [], 'curLabel': None, 'labels': [], 'labelUID': 0})
	del Ilabel, il
except:
	reportRestoreError("Error restoring IlabelModel instance in session")


try:
	from Ilabel.Arrows import ArrowsModel
	ArrowsModel().restore({'arrows': []})
except:
	reportRestoreError("Error restoring 2D arrows in session")



try:
	from Ilabel.ColorKey import getKeyModel
	getKeyModel()._restoreSession({'label spacing': 'proportional to value', 'label justification': 'decimal point', 'font size': 24, 'label positions': 'right/bottom', 'show ticks': False, 'border width': 2, 'label offset': 0, 'color depiction': 'blended', 'label color': (1, 1, 1), 'font name': 'Sans Serif', 'tick length': 10, 'border color': (1, 1, 1, 1.0), 'key position': None, 'font typeface': 0, 'tick thickness': 4, 'colors/labels': [((0, 0, 1, 1), 'min'), ((1, 1, 1, 1), 'grey'), ((1, 0, 0, 1), 'max')]})
except:
	reportRestoreError("Error restoring color key")



def restore2DLabelDialog(info):
	from chimera.dialogs import find
	from Ilabel.gui import IlabelDialog
	dlg = find(IlabelDialog.name)
	if dlg is not None:
		dlg.destroy()
	dlg = find(IlabelDialog.name, create=True)
	dlg._restoreSession(info)

import SimpleSession
SimpleSession.registerAfterModelsCB(restore2DLabelDialog, {'mouse func': 'normal', 'sel ranges': (), 'dialog shown': 0})



def restoreRemainder():
	from SimpleSession.versions.v65 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  []
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (579, 502)
	xformMap = {0: (((0.55288646801602, 0.35949891919849, -0.75171609040907), 3.1582866677789), (-0.00063422369768754, 0.11214501092372, 0.053165492970475), True)}
	fontInfo = {'face': (u'Sans Serif', u'Normal', 18)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 669: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v65 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v65 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

