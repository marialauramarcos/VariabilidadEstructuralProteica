import cPickle, base64
try:
	from SimpleSession.versions.v65 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 11, 2, 41376])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v65 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSwFOfYdVCWJhbGxTY2FsZXEDSwFHP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLAUc/8AAAAAAAAH2HVQVjb2xvcnEFSwFLAH2HVQpyaWJib25UeXBlcQZLAUsAfYdVCnN0aWNrU2NhbGVxB0sBRz/wAAAAAAAAfYdVDG1tQ0lGSGVhZGVyc3EIXXEJTmFVDGFyb21hdGljTW9kZXEKSwFLAX2HVQp2ZHdEZW5zaXR5cQtLAUdAFAAAAAAAAH2HVQZoaWRkZW5xDEsBiX2HVQ1hcm9tYXRpY0NvbG9ycQ1LAU59h1UPcmliYm9uU21vb3RoaW5ncQ5LAUsAfYdVCWF1dG9jaGFpbnEPSwGIfYdVCnBkYlZlcnNpb25xEEsBSwJ9h1UIb3B0aW9uYWxxEX1xElUIb3BlbmVkQXNxE4iJSwEoWIEAAABDOlxVc2Vyc1xNYXLDrWEgTGF1cmFcRGVza3RvcFxWYXJpYWJpbGlkYWRFc3RydWN0dXJhbFByb3RlaWNhXFZhcmlhYmlsaWRhZEVzdHJ1Y3R1cmFsUHJvdGVpY2FcT1VUXG91dF9zdWJzZXRfQ01fQU5NXDFtY3RhX211dC5wZGJxFFUDUERCcRVOiXRxFn2Hh3NVD2xvd2VyQ2FzZUNoYWluc3EXSwGJfYdVCWxpbmVXaWR0aHEYSwFHP/AAAAAAAAB9h1UPcmVzaWR1ZUxhYmVsUG9zcRlLAUsAfYdVBG5hbWVxGksBWA0AAAAxbWN0YV9tdXQucGRifYdVD2Fyb21hdGljRGlzcGxheXEbSwGJfYdVD3JpYmJvblN0aWZmbmVzc3EcSwFHP+mZmZmZmZp9h1UKcGRiSGVhZGVyc3EdXXEefXEfYVUDaWRzcSBLAUsASwCGfYdVDnN1cmZhY2VPcGFjaXR5cSFLAUe/8AAAAAAAAH2HVRBhcm9tYXRpY0xpbmVUeXBlcSJLAUsCfYdVFHJpYmJvbkhpZGVzTWFpbmNoYWlucSNLAYh9h1UHZGlzcGxheXEkSwGIfYd1Lg=='))
	resInfo = cPickle.loads(base64.b64decode('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'))
	atomInfo = cPickle.loads(base64.b64decode(''))
	bondInfo = cPickle.loads(base64.b64decode('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'))
	crdInfo = cPickle.loads(base64.b64decode('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'))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'customVisibility': [], 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), 'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), 'Rf': ((0.8, 0, 0.34902), 1, u'default'), 'Ra': ((0, 0.490196, 0), 1, u'default'), 'slate gray': ((0.439216, 0.501961, 0.564706), 1, u'default'), 'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), 'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), 'Be': ((0.760784, 1, 0), 1, u'default'), 'Ba': ((0, 0.788235, 0), 1, u'default'), 'Bh': ((0.878431, 0, 0.219608), 1, u'default'), 'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), 'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), 'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), 'H': ((1, 1, 1), 1, u'default'), 'P': ((1, 0.501961, 0), 1, u'default'), 'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), 'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), 'Gd': ((0.270588, 1, 0.780392), 1, u'default'), 'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'), 'Pr': ((0.85098, 1, 0.780392), 1, u'default'), 'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), 'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'),
'Pu': ((0, 0.419608, 1), 1, u'default'), 'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), 'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), 'Pa': ((0, 0.631373, 1), 1, u'default'), 'Pd': ((0, 0.411765, 0.521569), 1, u'default'), 'Cd': ((1, 0.85098, 0.560784), 1, u'default'), 'Po': ((0.670588, 0.360784, 0), 1, u'default'), 'Pm': ((0.639216, 1, 0.780392), 1, u'default'), 'Hs': ((0.901961, 0, 0.180392), 1, u'default'), 'Ho': ((0, 1, 0.611765), 1, u'default'), 'Hf': ((0.301961, 0.760784, 1), 1, u'default'), 'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), 'He': ((0.85098, 1, 1), 1, u'default'), 'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), 'Mg': ((0.541176, 1, 0), 1, u'default'), 'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), 'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), 'O': ((1, 0.0509804, 0.0509804), 1, u'default'), 'Mt': ((0.921569, 0, 0.14902), 1, u'default'), 'S': ((1, 1, 0.188235), 1, u'default'), 'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), 'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), 'Eu': ((0.380392, 1, 0.780392), 1, u'default'),
'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), 'Er': ((0, 0.901961, 0.458824), 1, u'default'), 'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), 'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), 'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), 'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), 'Nd': ((0.780392, 1, 0.780392), 1, u'default'), 'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), 'Np': ((0, 0.501961, 1), 1, u'default'), 'Fr': ((0.258824, 0, 0.4), 1, u'default'), 'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), 'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), 'B': ((1, 0.709804, 0.709804), 1, u'default'), 'F': ((0.564706, 0.878431, 0.313725), 1, u'default'), 'Sr': ((0, 1, 0), 1, u'default'), 'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), 'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), 'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), 'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), 'Sm': ((0.560784, 1, 0.780392), 1, u'default'), 'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), 'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'),
'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), 'Sg': ((0.85098, 0, 0.270588), 1, u'default'), 'Se': ((1, 0.631373, 0), 1, u'default'), 'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), 'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), 'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), 'Ca': ((0.239216, 1, 0), 1, u'default'), 'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), 'Ce': ((1, 1, 0.780392), 1, u'default'), 'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), 'Tm': ((0, 0.831373, 0.321569), 1, u'default'), 'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'), 'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), 'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), 'La': ((0.439216, 0.831373, 1), 1, u'default'), 'Li': ((0.8, 0.501961, 1), 1, u'default'), 'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), 'Lu': ((0, 0.670588, 0.141176), 1, u'default'), 'Lr': ((0.780392, 0, 0.4), 1, u'default'), 'Th': ((0, 0.729412, 1), 1, u'default'), 'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'), 'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'),
'Te': ((0.831373, 0.478431, 0), 1, u'default'), 'Tb': ((0.188235, 1, 0.780392), 1, u'default'), 'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), 'Ta': ((0.301961, 0.65098, 1), 1, u'default'), 'pink': ((1, 0.752941, 0.796078), 1, u'default'), 'Yb': ((0, 0.74902, 0.219608), 1, u'default'), 'Db': ((0.819608, 0, 0.309804), 1, u'default'), 'Dy': ((0.121569, 1, 0.780392), 1, u'default'), 'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), 'I': ((0.580392, 0, 0.580392), 1, u'default'), 'U': ((0, 0.560784, 1), 1, u'default'), 'Y': ((0.580392, 1, 1), 1, u'default'), 'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), 'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), 'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), 'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), 'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), 'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), 'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), 'Au': ((1, 0.819608, 0.137255), 1, u'default'), 'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), 'In': ((0.65098, 0.458824, 0.45098), 1, u'default'),
'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default')}
	materials = {u'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 42, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (132, (u'', (0.411576, 0.411576, 1, 1)), {(u'', (0.868167, 0.868167, 1, 1)): [63], (u'', (1, 0.836013, 0.836013, 1)): [124], (u'', (1, 0.919614, 0.919614, 1)): [69], (u'', (0.244373, 0.244373, 1, 1)): [26], (u'', (1, 0.958199, 0.958199, 1)): [51], (u'', (0.405145, 0.405145, 1, 1)): [111], (u'', (0.5209, 0.5209, 1, 1)): [5], (u'', (0.44373, 0.44373, 1, 1)): [78], (u'', (0.610932, 0.610932, 1, 1)): [47], (u'', (0.996785, 0.996785, 1, 1)): [123], (u'', (1, 0, 0, 1)): [127], (u'', (0.906752, 0.906752, 1, 1)): [8], (u'', (1, 0.745981, 0.745981, 1)): [49], (u'', (0.257235, 0.257235, 1, 1)): [79], (u'', (0.636656, 0.636656, 1, 1)): [57], (u'', (0, 0, 1, 1)): [105], (u'', (0.700965, 0.700965, 1, 1)): [11], (u'', (0.109325, 0.109325, 1, 1)): [115], (u'', (0.096463, 0.096463, 1, 1)): [129], (u'', (1, 0.96463, 0.96463, 1)): [84], (u'', (1, 0.688103, 0.688103, 1)): [19], (u'', (1, 0.913183, 0.913183, 1)): [65], (u'green', (0, 1, 0, 1)): [131], (u'', (0.205788, 0.205788, 1, 1)): [67], (u'', (0.334405, 0.334405, 1, 1)): [102], (u'', (0.938907, 0.938907, 1, 1)): [101], (u'', (0.218649, 0.218649, 1, 1)): [24], (u'', (1, 0.643087, 0.643087, 1)): [48],
(u'', (0.463022, 0.463022, 1, 1)): [55], (u'', (1, 0.636656, 0.636656, 1)): [64], (u'', (0.250804, 0.250804, 1, 1)): [32], (u'', (0.508039, 0.508039, 1, 1)): [27], (u'', (0.810289, 0.810289, 1, 1)): [100], (u'', (0.681672, 0.681672, 1, 1)): [40], (u'', (0.398714, 0.398714, 1, 1)): [56], (u'', (1, 0.604502, 0.604502, 1)): [7], (u'', (0.553055, 0.553055, 1, 1)): [29], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'', (0.29582, 0.29582, 1, 1)): [99], (u'', (0.180064, 0.180064, 1, 1)): [22], (u'', (0.88746, 0.88746, 1, 1)): [37], (u'', (1, 0.874598, 0.874598, 1)): [106], (u'', (0.450161, 0.450161, 1, 1)): [12], (u'', (0.437299, 0.437299, 1, 1)): [112], (u'', (0.154341, 0.154341, 1, 1)): [33], (u'', (0.96463, 0.96463, 1, 1)): [10], (u'black', (0, 0, 0, 1)): [128], (u'', (1, 0.707396, 0.707396, 1)): [122], (u'', (0.302251, 0.302251, 1, 1)): [16], (u'', (0.360129, 0.360129, 1, 1)): [4], (u'', (0.276527, 0.276527, 1, 1)): [90], (u'', (1, 0.868167, 0.868167, 1)): [75], (u'', (1, 0.996785, 0.996785, 1)): [91], (u'', (0.527331, 0.527331, 1, 1)): [3], (u'', (1, 0.572347, 0.572347, 1)): [60],
(u'', (0.270096, 0.270096, 1, 1)): [31], (u'', (0.385852, 0.385852, 1, 1)): [13], (u'', (0.14791, 0.14791, 1, 1)): [108], (u'', (0.347267, 0.347267, 1, 1)): [14], (u'', (0.59164, 0.59164, 1, 1)): [54], (u'', (0.212219, 0.212219, 1, 1)): [1], (u'', (0.282958, 0.282958, 1, 1)): [114], (u'', (0.784566, 0.784566, 1, 1)): [92], (u'', (0.73955, 0.73955, 1, 1)): [77], (u'', (0.115756, 0.115756, 1, 1)): [109], (u'', (0.623794, 0.623794, 1, 1)): [76], (u'', (1, 0.810289, 0.810289, 1)): [95], (u'', (0.649518, 0.649518, 1, 1)): [73], (u'', (1, 0.437299, 0.437299, 1)): [126], (u'', (1, 0.0321545, 0.0321545, 1)): [82], (u'', (1, 0.951769, 0.951769, 1)): [120], (u'', (0.475884, 0.475884, 1, 1)): [45], (u'', (0.713826, 0.713826, 1, 1)): [18], (u'', (0.231511, 0.231511, 1, 1)): [2], (u'', (0.655949, 0.655949, 1, 1)): [59], (u'', (0.932476, 0.932476, 1, 1)): [38], (u'', (0.604502, 0.604502, 1, 1)): [85], (u'', (0.771704, 0.771704, 1, 1)): [86], (u'', (0.488746, 0.488746, 1, 1)): [58], (u'', (0.745981, 0.745981, 1, 1)): [6], (u'', (0.643087, 0.643087, 1, 1)): [110], (u'', (0.501608, 0.501608, 1, 1)): [41],
(u'', (0.707395, 0.707395, 1, 1)): [46], (u'', (0.321543, 0.321543, 1, 1)): [15], (u'', (0.585209, 0.585209, 1, 1)): [116], (u'', (0.141479, 0.141479, 1, 1)): [23], (u'', (0.495177, 0.495177, 1, 1)): [74], (u'', (1, 0.713826, 0.713826, 1)): [9], (u'', (1, 0.778135, 0.778135, 1)): [50], (u'', (0.913183, 0.913183, 1, 1)): [72], (u'', (0.22508, 0.22508, 1, 1)): [34], (u'', (0.617363, 0.617363, 1, 1)): [35], (u'', (0.379421, 0.379421, 1, 1)): [30], (u'', (0.430868, 0.430868, 1, 1)): [104], (u'', (0.340836, 0.340836, 1, 1)): [43], (u'', (0.726688, 0.726688, 1, 1)): [66], (u'', (0.392283, 0.392283, 1, 1)): [28], (u'', (0.855305, 0.855305, 1, 1)): [39], (u'', (0.803859, 0.803859, 1, 1)): [71], (u'', (0.418006, 0.418006, 1, 1)): [89], (u'', (1, 0.797428, 0.797428, 1)): [61], (u'', (0.861736, 0.861736, 1, 1)): [121], (u'', (0.353698, 0.353698, 1, 1)): [98], (u'', (1, 0.411576, 0.411576, 1)): [125], (u'', (0.289389, 0.289389, 1, 1)): [87], (u'', (0.765273, 0.765273, 1, 1)): [113], (u'', (0.565916, 0.565916, 1, 1)): [68], (u'', (0.263666, 0.263666, 1, 1)): [80], (u'', (0.733119, 0.733119, 1, 1)): [36],
(u'', (0.469453, 0.469453, 1, 1)): [21], (u'', (0.327974, 0.327974, 1, 1)): [25], (u'', (1, 0.855306, 0.855306, 1)): [94], (u'', (1, 0.971061, 0.971061, 1)): [20], (u'', (0.630225, 0.630225, 1, 1)): [62], (u'', (0.315113, 0.315113, 1, 1)): [44], (u'', (1, 0.945338, 0.945338, 1)): [52], (u'', (0.366559, 0.366559, 1, 1)): [88], (u'', (0.546624, 0.546624, 1, 1)): [103], (u'yellow', (1, 1, 0, 1)): [42], (u'', (0.758842, 0.758842, 1, 1)): [117], (u'', (0.540193, 0.540193, 1, 1)): [81], (u'white', (1, 1, 1, 1)): [130], (u'', (0.752412, 0.752412, 1, 1)): [53], (u'', (1, 0.823151, 0.823151, 1)): [118], (u'', (0.958199, 0.958199, 1, 1)): [119], (u'', (0.823151, 0.823151, 1, 1)): [97], (u'', (1, 0.14791, 0.14791, 1)): [83], (u'', (0.675241, 0.675241, 1, 1)): [70], (u'', (1, 0.977492, 0.977492, 1)): [96], (u'', (0.881029, 0.881029, 1, 1)): [93], (u'', (0.308682, 0.308682, 1, 1)): [17]})
	viewerInfo = {'cameraAttrs': {'center': (2.052, -0.3535, 0.915), 'fieldOfView': 4.8309680011576, 'nearFar': (27.596963226824, -25.766963226824), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 0.915}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': False, 'showShadows': False, 'viewSize': 25.853417325178, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 2, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': True, 'highlight': 0, 'scaleFactor': 1, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 131, 'cameraMode': 'mono', 'detail': 1.5, 'viewerFog': None, 'viewerBG': 130}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v65 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [ ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(1, ('RibbonStyleWorm', [0.435691]), 'rounded', u'amino acid'), (2, ('RibbonStyleWorm', [0.452572]), 'rounded', u'amino acid'), (3, ('RibbonStyleWorm', [0.711415]), 'rounded', u'amino acid'), (4, ('RibbonStyleWorm', [0.565113]), 'rounded', u'amino acid'), (5, ('RibbonStyleWorm', [0.705788]), 'rounded', u'amino acid'), (6, ('RibbonStyleWorm', [0.705788]), 'rounded', u'amino acid'), (7, ('RibbonStyleWorm', [0.902733]), 'rounded', u'amino acid'), (8, ('RibbonStyleWorm', [1.47106]), 'rounded', u'amino acid'), (9, ('RibbonStyleWorm', [1.04341]), 'rounded', u'amino acid'), (10, ('RibbonStyleWorm', [1.3754]), 'rounded', u'amino acid'), (11, ('RibbonStyleWorm', [1.09405]), 'rounded', u'amino acid'), (12, ('RibbonStyleWorm', [0.863344]), 'rounded', u'amino acid'), (13, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'), (14, ('RibbonStyleWorm', [0.587621]), 'rounded', u'amino acid'), (15, ('RibbonStyleWorm', [0.553859]), 'rounded', u'amino acid'), (16, ('RibbonStyleWorm', [0.53135]), 'rounded', u'amino acid'), (17, ('RibbonStyleWorm', [0.514469]), 'rounded', u'amino acid'),
(18, ('RibbonStyleWorm', [0.520096]), 'rounded', u'amino acid'), (19, ('RibbonStyleWorm', [0.587621]), 'rounded', u'amino acid'), (20, ('RibbonStyleWorm', [0.874598]), 'rounded', u'amino acid'), (21, ('RibbonStyleWorm', [1.39791]), 'rounded', u'amino acid'), (22, ('RibbonStyleWorm', [1.15032]), 'rounded', u'amino acid'), (23, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (24, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'), (25, ('RibbonStyleWorm', [0.407556]), 'rounded', u'amino acid'), (26, ('RibbonStyleWorm', [0.373794]), 'rounded', u'amino acid'), (27, ('RibbonStyleWorm', [0.441318]), 'rounded', u'amino acid'), (28, ('RibbonStyleWorm', [0.536977]), 'rounded', u'amino acid'), (29, ('RibbonStyleWorm', [0.514469]), 'rounded', u'amino acid'), (30, ('RibbonStyleWorm', [0.463826]), 'rounded', u'amino acid'), (31, ('RibbonStyleWorm', [0.694534]), 'rounded', u'amino acid'), (32, ('RibbonStyleWorm', [0.593248]), 'rounded', u'amino acid'), (33, ('RibbonStyleWorm', [0.733923]), 'rounded', u'amino acid'), (34, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'),
(35, ('RibbonStyleWorm', [0.581994]), 'rounded', u'amino acid'), (36, ('RibbonStyleWorm', [0.486334]), 'rounded', u'amino acid'), (37, ('RibbonStyleWorm', [0.469453]), 'rounded', u'amino acid'), (38, ('RibbonStyleWorm', [0.385048]), 'rounded', u'amino acid'), (39, ('RibbonStyleWorm', [0.446945]), 'rounded', u'amino acid'), (40, ('RibbonStyleWorm', [0.790193]), 'rounded', u'amino acid'), (41, ('RibbonStyleWorm', [0.53135]), 'rounded', u'amino acid'), (42, ('RibbonStyleWorm', [0.891479]), 'rounded', u'amino acid'), (43, ('RibbonStyleWorm', [1.02653]), 'rounded', u'amino acid'), (44, ('RibbonStyleWorm', [1.06592]), 'rounded', u'amino acid'), (45, ('RibbonStyleWorm', [0.998392]), 'rounded', u'amino acid'), (46, ('RibbonStyleWorm', [0.846463]), 'rounded', u'amino acid'), (47, ('RibbonStyleWorm', [0.688907]), 'rounded', u'amino acid'), (48, ('RibbonStyleWorm', [0.666399]), 'rounded', u'amino acid'), (49, ('RibbonStyleWorm', [0.593248]), 'rounded', u'amino acid'), (50, ('RibbonStyleWorm', [0.548231]), 'rounded', u'amino acid'), (51, ('RibbonStyleWorm', [0.525723]), 'rounded', u'amino acid'),
(52, ('RibbonStyleWorm', [0.666399]), 'rounded', u'amino acid'), (53, ('RibbonStyleWorm', [0.868971]), 'rounded', u'amino acid'), (54, ('RibbonStyleWorm', [0.784566]), 'rounded', u'amino acid'), (55, ('RibbonStyleWorm', [0.874598]), 'rounded', u'amino acid'), (56, ('RibbonStyleWorm', [1.4373]), 'rounded', u'amino acid'), (57, ('RibbonStyleWorm', [1.34727]), 'rounded', u'amino acid'), (58, ('RibbonStyleWorm', [1.31913]), 'rounded', u'amino acid'), (59, ('RibbonStyleWorm', [1.16158]), 'rounded', u'amino acid'), (60, ('RibbonStyleWorm', [1.17283]), 'rounded', u'amino acid'), (61, ('RibbonStyleWorm', [0.90836]), 'rounded', u'amino acid'), (62, ('RibbonStyleWorm', [0.711415]), 'rounded', u'amino acid'), (63, ('RibbonStyleWorm', [0.705788]), 'rounded', u'amino acid'), (64, ('RibbonStyleWorm', [0.767685]), 'rounded', u'amino acid'), (65, ('RibbonStyleWorm', [0.790193]), 'rounded', u'amino acid'), (66, ('RibbonStyleWorm', [0.666399]), 'rounded', u'amino acid'), (67, ('RibbonStyleWorm', [0.655145]), 'rounded', u'amino acid'), (68, ('RibbonStyleWorm', [0.694534]), 'rounded', u'amino acid'),
(69, ('RibbonStyleWorm', [0.598875]), 'rounded', u'amino acid'), (70, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'), (71, ('RibbonStyleWorm', [0.807074]), 'rounded', u'amino acid'), (72, ('RibbonStyleWorm', [0.677653]), 'rounded', u'amino acid'), (73, ('RibbonStyleWorm', [0.823955]), 'rounded', u'amino acid'), (74, ('RibbonStyleWorm', [1.4992]), 'rounded', u'amino acid'), (75, ('RibbonStyleWorm', [1.30225]), 'rounded', u'amino acid'), (76, ('RibbonStyleWorm', [0.801447]), 'rounded', u'amino acid'), (77, ('RibbonStyleWorm', [1.00965]), 'rounded', u'amino acid'), (78, ('RibbonStyleWorm', [0.998392]), 'rounded', u'amino acid'), (79, ('RibbonStyleWorm', [1.44293]), 'rounded', u'amino acid'), (80, ('RibbonStyleWorm', [1.20096]), 'rounded', u'amino acid'), (81, ('RibbonStyleWorm', [0.863344]), 'rounded', u'amino acid'), (82, ('RibbonStyleWorm', [0.885852]), 'rounded', u'amino acid'), (83, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'), (84, ('RibbonStyleWorm', [0.435691]), 'rounded', u'amino acid'), (85, ('RibbonStyleWorm', [0.430064]), 'rounded', u'amino acid'),
(86, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (87, ('RibbonStyleWorm', [0.655145]), 'rounded', u'amino acid'), (88, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (89, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (90, ('RibbonStyleWorm', [0.548231]), 'rounded', u'amino acid'), (91, ('RibbonStyleWorm', [0.745177]), 'rounded', u'amino acid'), (92, ('RibbonStyleWorm', [0.913987]), 'rounded', u'amino acid'), (93, ('RibbonStyleWorm', [0.733923]), 'rounded', u'amino acid'), (94, ('RibbonStyleWorm', [0.863344]), 'rounded', u'amino acid'), (95, ('RibbonStyleWorm', [1.19534]), 'rounded', u'amino acid'), (96, ('RibbonStyleWorm', [0.840836]), 'rounded', u'amino acid'), (97, ('RibbonStyleWorm', [0.953376]), 'rounded', u'amino acid'), (98, ('RibbonStyleWorm', [1.04904]), 'rounded', u'amino acid'), (99, ('RibbonStyleWorm', [0.666399]), 'rounded', u'amino acid'), (100, ('RibbonStyleWorm', [0.514469]), 'rounded', u'amino acid'), (101, ('RibbonStyleWorm', [0.818328]), 'rounded', u'amino acid'), (102, ('RibbonStyleWorm', [0.587621]), 'rounded', u'amino acid'),
(103, ('RibbonStyleWorm', [0.767685]), 'rounded', u'amino acid'), (104, ('RibbonStyleWorm', [0.68328]), 'rounded', u'amino acid'), (105, ('RibbonStyleWorm', [0.868971]), 'rounded', u'amino acid'), (106, ('RibbonStyleWorm', [0.767685]), 'rounded', u'amino acid'), (107, ('RibbonStyleWorm', [1.24035]), 'rounded', u'amino acid'), (108, ('RibbonStyleWorm', [1.06592]), 'rounded', u'amino acid'), (109, ('RibbonStyleWorm', [1.02653]), 'rounded', u'amino acid'), (110, ('RibbonStyleWorm', [1.02653]), 'rounded', u'amino acid'), (111, ('RibbonStyleWorm', [0.953376]), 'rounded', u'amino acid'), (112, ('RibbonStyleWorm', [0.79582]), 'rounded', u'amino acid'), (113, ('RibbonStyleWorm', [0.897106]), 'rounded', u'amino acid'), (114, ('RibbonStyleWorm', [0.638264]), 'rounded', u'amino acid'), (115, ('RibbonStyleWorm', [0.565113]), 'rounded', u'amino acid'), (116, ('RibbonStyleWorm', [0.53135]), 'rounded', u'amino acid'), (117, ('RibbonStyleWorm', [0.47508]), 'rounded', u'amino acid'), (118, ('RibbonStyleWorm', [0.593248]), 'rounded', u'amino acid'), (119, ('RibbonStyleWorm', [0.430064]), 'rounded', u'amino acid'),
(120, ('RibbonStyleWorm', [0.446945]), 'rounded', u'amino acid'), (121, ('RibbonStyleWorm', [0.446945]), 'rounded', u'amino acid'), (122, ('RibbonStyleWorm', [0.480707]), 'rounded', u'amino acid'), (123, ('RibbonStyleWorm', [0.536977]), 'rounded', u'amino acid'), (124, ('RibbonStyleWorm', [0.514469]), 'rounded', u'amino acid'), (125, ('RibbonStyleWorm', [0.722669]), 'rounded', u'amino acid'), (126, ('RibbonStyleWorm', [0.998392]), 'rounded', u'amino acid'), (127, ('RibbonStyleWorm', [1.97186]), 'rounded', u'amino acid'), (128, ('RibbonStyleWorm', [1.87058]), 'rounded', u'amino acid'), (129, ('RibbonStyleWorm', [1.16158]), 'rounded', u'amino acid'), (130, ('RibbonStyleWorm', [1.15595]), 'rounded', u'amino acid'), (131, ('RibbonStyleWorm', [0.778939]), 'rounded', u'amino acid'), (132, ('RibbonStyleWorm', [0.925241]), 'rounded', u'amino acid'), (133, ('RibbonStyleWorm', [0.767685]), 'rounded', u'amino acid'), (134, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (135, ('RibbonStyleWorm', [0.446945]), 'rounded', u'amino acid'), (136, ('RibbonStyleWorm', [0.53135]), 'rounded', u'amino acid'),
(137, ('RibbonStyleWorm', [0.503215]), 'rounded', u'amino acid'), (138, ('RibbonStyleWorm', [0.565113]), 'rounded', u'amino acid'), (139, ('RibbonStyleWorm', [0.57074]), 'rounded', u'amino acid'), (140, ('RibbonStyleWorm', [0.615756]), 'rounded', u'amino acid'), (141, ('RibbonStyleWorm', [0.638264]), 'rounded', u'amino acid'), (142, ('RibbonStyleWorm', [0.548231]), 'rounded', u'amino acid'), (143, ('RibbonStyleWorm', [0.491961]), 'rounded', u'amino acid'), (144, ('RibbonStyleWorm', [1.12781]), 'rounded', u'amino acid'), (145, ('RibbonStyleWorm', [0.936495]), 'rounded', u'amino acid'), (146, ('RibbonStyleWorm', [1.0209]), 'rounded', u'amino acid'), (147, ('RibbonStyleWorm', [0.846463]), 'rounded', u'amino acid'), (148, ('RibbonStyleWorm', [0.722669]), 'rounded', u'amino acid'), (149, ('RibbonStyleWorm', [0.846463]), 'rounded', u'amino acid'), (150, ('RibbonStyleWorm', [0.885852]), 'rounded', u'amino acid'), (151, ('RibbonStyleWorm', [0.846463]), 'rounded', u'amino acid'), (152, ('RibbonStyleWorm', [0.694534]), 'rounded', u'amino acid'), (153, ('RibbonStyleWorm', [0.90836]), 'rounded', u'amino acid'),
(154, ('RibbonStyleWorm', [1.25161]), 'rounded', u'amino acid'), (155, ('RibbonStyleWorm', [1.291]), 'rounded', u'amino acid'), (156, ('RibbonStyleWorm', [1.14469]), 'rounded', u'amino acid'), (157, ('RibbonStyleWorm', [0.970257]), 'rounded', u'amino acid'), (158, ('RibbonStyleWorm', [1.12781]), 'rounded', u'amino acid'), (159, ('RibbonStyleWorm', [0.553859]), 'rounded', u'amino acid'), (160, ('RibbonStyleWorm', [0.559485]), 'rounded', u'amino acid'), (161, ('RibbonStyleWorm', [0.435691]), 'rounded', u'amino acid'), (162, ('RibbonStyleWorm', [0.508842]), 'rounded', u'amino acid'), (163, ('RibbonStyleWorm', [0.520096]), 'rounded', u'amino acid'), (164, ('RibbonStyleWorm', [0.452572]), 'rounded', u'amino acid'), (165, ('RibbonStyleWorm', [0.677653]), 'rounded', u'amino acid'), (166, ('RibbonStyleWorm', [0.959003]), 'rounded', u'amino acid'), (167, ('RibbonStyleWorm', [1.07154]), 'rounded', u'amino acid'), (168, ('RibbonStyleWorm', [0.643891]), 'rounded', u'amino acid'), (169, ('RibbonStyleWorm', [0.79582]), 'rounded', u'amino acid'), (170, ('RibbonStyleWorm', [0.542605]), 'rounded', u'amino acid'),
(171, ('RibbonStyleWorm', [0.503215]), 'rounded', u'amino acid'), (172, ('RibbonStyleWorm', [0.57074]), 'rounded', u'amino acid'), (173, ('RibbonStyleWorm', [0.728296]), 'rounded', u'amino acid'), (174, ('RibbonStyleWorm', [0.62701]), 'rounded', u'amino acid'), (175, ('RibbonStyleWorm', [0.548231]), 'rounded', u'amino acid'), (176, ('RibbonStyleWorm', [0.385048]), 'rounded', u'amino acid'), (177, ('RibbonStyleWorm', [0.407556]), 'rounded', u'amino acid'), (178, ('RibbonStyleWorm', [0.25]), 'rounded', u'amino acid'), (179, ('RibbonStyleWorm', [0.334405]), 'rounded', u'amino acid'), (180, ('RibbonStyleWorm', [0.373794]), 'rounded', u'amino acid'), (181, ('RibbonStyleWorm', [0.615756]), 'rounded', u'amino acid'), (182, ('RibbonStyleWorm', [0.503215]), 'rounded', u'amino acid'), (183, ('RibbonStyleWorm', [0.660772]), 'rounded', u'amino acid'), (184, ('RibbonStyleWorm', [1.23473]), 'rounded', u'amino acid'), (185, ('RibbonStyleWorm', [1.1672]), 'rounded', u'amino acid'), (186, ('RibbonStyleWorm', [0.745177]), 'rounded', u'amino acid'), (187, ('RibbonStyleWorm', [0.593248]), 'rounded', u'amino acid'),
(188, ('RibbonStyleWorm', [0.610129]), 'rounded', u'amino acid'), (189, ('RibbonStyleWorm', [0.548231]), 'rounded', u'amino acid'), (190, ('RibbonStyleWorm', [0.430064]), 'rounded', u'amino acid'), (191, ('RibbonStyleWorm', [0.379421]), 'rounded', u'amino acid'), (192, ('RibbonStyleWorm', [0.351286]), 'rounded', u'amino acid'), (193, ('RibbonStyleWorm', [0.812701]), 'rounded', u'amino acid'), (194, ('RibbonStyleWorm', [0.604502]), 'rounded', u'amino acid'), (195, ('RibbonStyleWorm', [0.891479]), 'rounded', u'amino acid'), (196, ('RibbonStyleWorm', [1.04904]), 'rounded', u'amino acid'), (197, ('RibbonStyleWorm', [0.666399]), 'rounded', u'amino acid'), (198, ('RibbonStyleWorm', [0.57074]), 'rounded', u'amino acid'), (199, ('RibbonStyleWorm', [0.632637]), 'rounded', u'amino acid'), (200, ('RibbonStyleWorm', [0.846463]), 'rounded', u'amino acid'), (201, ('RibbonStyleWorm', [0.919614]), 'rounded', u'amino acid'), (202, ('RibbonStyleWorm', [0.565113]), 'rounded', u'amino acid'), (203, ('RibbonStyleWorm', [0.497588]), 'rounded', u'amino acid'), (204, ('RibbonStyleWorm', [0.638264]), 'rounded', u'amino acid'),
(205, ('RibbonStyleWorm', [0.486334]), 'rounded', u'amino acid'), (206, ('RibbonStyleWorm', [0.47508]), 'rounded', u'amino acid'), (207, ('RibbonStyleWorm', [0.345659]), 'rounded', u'amino acid'), (208, ('RibbonStyleWorm', [0.53135]), 'rounded', u'amino acid'), (209, ('RibbonStyleWorm', [0.688907]), 'rounded', u'amino acid'), (210, ('RibbonStyleWorm', [0.762058]), 'rounded', u'amino acid'), (211, ('RibbonStyleWorm', [0.913987]), 'rounded', u'amino acid'), (212, ('RibbonStyleWorm', [1.27974]), 'rounded', u'amino acid'), (213, ('RibbonStyleWorm', [1.08842]), 'rounded', u'amino acid'), (214, ('RibbonStyleWorm', [1.16158]), 'rounded', u'amino acid'), (215, ('RibbonStyleWorm', [1.1672]), 'rounded', u'amino acid'), (216, ('RibbonStyleWorm', [1.00402]), 'rounded', u'amino acid'), (217, ('RibbonStyleWorm', [1.38103]), 'rounded', u'amino acid'), (218, ('RibbonStyleWorm', [1.15032]), 'rounded', u'amino acid'), (219, ('RibbonStyleWorm', [1.12219]), 'rounded', u'amino acid'), (220, ('RibbonStyleWorm', [1.26849]), 'rounded', u'amino acid'), (221, ('RibbonStyleWorm', [1.63987]), 'rounded', u'amino acid'),
(222, ('RibbonStyleWorm', [1.61736]), 'rounded', u'amino acid'), (223, ('RibbonStyleWorm', [2]), 'rounded', u'amino acid')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDWgEVQRtb2RlcQ5VBmxpbmVhcnEPdWJVCGtleWZyYW1lcRBoBSmBcRF9cRIoaAhLFGgJSwFoCl1xE2gMYWgNaBBoDmgPdWJVBXNjZW5lcRRoBSmBcRV9cRYoaAhLAWgJSwFoCl1xF2gMYWgNaBRoDmgPdWJ1Yi4='
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [30.0, (0.85, 0.85, 0.85), 1.0], 'back': [(0.35740674433659325, 0.6604015517481454, -0.6604015517481455), (1.0, 1.0, 1.0), 0.0], 'mode': 'two-point', 'key': [(-0.35740674433659325, 0.6604015517481454, 0.6604015517481455), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.25056280708573153, 0.25056280708573153, 0.9351131265310293), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restore_surface_color_mapping():
 try:
  surface_color_state = \
   {
    'class': 'Surface_Colorings_State',
    'coloring_table': {},
    'geometry': None,
    'is_visible': False,
    'version': 2,
   }
  import SurfaceColor.session
  SurfaceColor.session.restore_surface_color_state(surface_color_state)
 except:
  reportRestoreError('Error restoring surface color mapping')

registerAfterModelsCB(restore_surface_color_mapping)


def restoreRemainder():
	from SimpleSession.versions.v65 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  [315, 271, 402, 408]
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (579, 502)
	xformMap = {0: (((0.2371587517982, 0.89953182979172, 0.36687629200737), 2.1484511229537), (-0.034359507115758, -0.020655009185079, 0.072854247082437), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 669: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v65 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v65 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

